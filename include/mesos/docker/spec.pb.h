// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/docker/spec.proto

#ifndef PROTOBUF_mesos_2fdocker_2fspec_2eproto__INCLUDED
#define PROTOBUF_mesos_2fdocker_2fspec_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_mesos_2fdocker_2fspec_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsImageReferenceImpl();
void InitDefaultsImageReference();
void InitDefaultsConfig_AuthImpl();
void InitDefaultsConfig_Auth();
void InitDefaultsConfigImpl();
void InitDefaultsConfig();
inline void InitDefaults() {
  InitDefaultsImageReference();
  InitDefaultsConfig_Auth();
  InitDefaultsConfig();
}
}  // namespace protobuf_mesos_2fdocker_2fspec_2eproto
namespace docker {
namespace spec {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Config_Auth;
class Config_AuthDefaultTypeInternal;
extern Config_AuthDefaultTypeInternal _Config_Auth_default_instance_;
class ImageReference;
class ImageReferenceDefaultTypeInternal;
extern ImageReferenceDefaultTypeInternal _ImageReference_default_instance_;
}  // namespace spec
}  // namespace docker
namespace docker {
namespace spec {

// ===================================================================

class ImageReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:docker.spec.ImageReference) */ {
 public:
  ImageReference();
  virtual ~ImageReference();

  ImageReference(const ImageReference& from);

  inline ImageReference& operator=(const ImageReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageReference(ImageReference&& from) noexcept
    : ImageReference() {
    *this = ::std::move(from);
  }

  inline ImageReference& operator=(ImageReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageReference* internal_default_instance() {
    return reinterpret_cast<const ImageReference*>(
               &_ImageReference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ImageReference* other);
  friend void swap(ImageReference& a, ImageReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageReference* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageReference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageReference& from);
  void MergeFrom(const ImageReference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string registry = 1;
  bool has_registry() const;
  void clear_registry();
  static const int kRegistryFieldNumber = 1;
  const ::std::string& registry() const;
  void set_registry(const ::std::string& value);
  #if LANG_CXX11
  void set_registry(::std::string&& value);
  #endif
  void set_registry(const char* value);
  void set_registry(const char* value, size_t size);
  ::std::string* mutable_registry();
  ::std::string* release_registry();
  void set_allocated_registry(::std::string* registry);

  // required string repository = 2;
  bool has_repository() const;
  void clear_repository();
  static const int kRepositoryFieldNumber = 2;
  const ::std::string& repository() const;
  void set_repository(const ::std::string& value);
  #if LANG_CXX11
  void set_repository(::std::string&& value);
  #endif
  void set_repository(const char* value);
  void set_repository(const char* value, size_t size);
  ::std::string* mutable_repository();
  ::std::string* release_repository();
  void set_allocated_repository(::std::string* repository);

  // optional string tag = 3;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 3;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // optional string digest = 4;
  bool has_digest() const;
  void clear_digest();
  static const int kDigestFieldNumber = 4;
  const ::std::string& digest() const;
  void set_digest(const ::std::string& value);
  #if LANG_CXX11
  void set_digest(::std::string&& value);
  #endif
  void set_digest(const char* value);
  void set_digest(const char* value, size_t size);
  ::std::string* mutable_digest();
  ::std::string* release_digest();
  void set_allocated_digest(::std::string* digest);

  // @@protoc_insertion_point(class_scope:docker.spec.ImageReference)
 private:
  void set_has_registry();
  void clear_has_registry();
  void set_has_repository();
  void clear_has_repository();
  void set_has_tag();
  void clear_has_tag();
  void set_has_digest();
  void clear_has_digest();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr registry_;
  ::google::protobuf::internal::ArenaStringPtr repository_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr digest_;
  friend struct ::protobuf_mesos_2fdocker_2fspec_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fdocker_2fspec_2eproto::InitDefaultsImageReferenceImpl();
};
// -------------------------------------------------------------------

class Config_Auth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:docker.spec.Config.Auth) */ {
 public:
  Config_Auth();
  virtual ~Config_Auth();

  Config_Auth(const Config_Auth& from);

  inline Config_Auth& operator=(const Config_Auth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config_Auth(Config_Auth&& from) noexcept
    : Config_Auth() {
    *this = ::std::move(from);
  }

  inline Config_Auth& operator=(Config_Auth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config_Auth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config_Auth* internal_default_instance() {
    return reinterpret_cast<const Config_Auth*>(
               &_Config_Auth_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Config_Auth* other);
  friend void swap(Config_Auth& a, Config_Auth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config_Auth* New() const PROTOBUF_FINAL { return New(NULL); }

  Config_Auth* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Config_Auth& from);
  void MergeFrom(const Config_Auth& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Config_Auth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string auth = 1;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 1;
  const ::std::string& auth() const;
  void set_auth(const ::std::string& value);
  #if LANG_CXX11
  void set_auth(::std::string&& value);
  #endif
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  ::std::string* mutable_auth();
  ::std::string* release_auth();
  void set_allocated_auth(::std::string* auth);

  // optional string email = 2;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 2;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:docker.spec.Config.Auth)
 private:
  void set_has_auth();
  void clear_has_auth();
  void set_has_email();
  void clear_has_email();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr auth_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  friend struct ::protobuf_mesos_2fdocker_2fspec_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fdocker_2fspec_2eproto::InitDefaultsConfig_AuthImpl();
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:docker.spec.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Config_Auth Auth;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:docker.spec.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct ::protobuf_mesos_2fdocker_2fspec_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fdocker_2fspec_2eproto::InitDefaultsConfigImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageReference

// optional string registry = 1;
inline bool ImageReference::has_registry() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageReference::set_has_registry() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageReference::clear_has_registry() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageReference::clear_registry() {
  registry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_registry();
}
inline const ::std::string& ImageReference::registry() const {
  // @@protoc_insertion_point(field_get:docker.spec.ImageReference.registry)
  return registry_.GetNoArena();
}
inline void ImageReference::set_registry(const ::std::string& value) {
  set_has_registry();
  registry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:docker.spec.ImageReference.registry)
}
#if LANG_CXX11
inline void ImageReference::set_registry(::std::string&& value) {
  set_has_registry();
  registry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:docker.spec.ImageReference.registry)
}
#endif
inline void ImageReference::set_registry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_registry();
  registry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:docker.spec.ImageReference.registry)
}
inline void ImageReference::set_registry(const char* value, size_t size) {
  set_has_registry();
  registry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:docker.spec.ImageReference.registry)
}
inline ::std::string* ImageReference::mutable_registry() {
  set_has_registry();
  // @@protoc_insertion_point(field_mutable:docker.spec.ImageReference.registry)
  return registry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageReference::release_registry() {
  // @@protoc_insertion_point(field_release:docker.spec.ImageReference.registry)
  clear_has_registry();
  return registry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageReference::set_allocated_registry(::std::string* registry) {
  if (registry != NULL) {
    set_has_registry();
  } else {
    clear_has_registry();
  }
  registry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registry);
  // @@protoc_insertion_point(field_set_allocated:docker.spec.ImageReference.registry)
}

// required string repository = 2;
inline bool ImageReference::has_repository() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageReference::set_has_repository() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageReference::clear_has_repository() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageReference::clear_repository() {
  repository_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_repository();
}
inline const ::std::string& ImageReference::repository() const {
  // @@protoc_insertion_point(field_get:docker.spec.ImageReference.repository)
  return repository_.GetNoArena();
}
inline void ImageReference::set_repository(const ::std::string& value) {
  set_has_repository();
  repository_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:docker.spec.ImageReference.repository)
}
#if LANG_CXX11
inline void ImageReference::set_repository(::std::string&& value) {
  set_has_repository();
  repository_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:docker.spec.ImageReference.repository)
}
#endif
inline void ImageReference::set_repository(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_repository();
  repository_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:docker.spec.ImageReference.repository)
}
inline void ImageReference::set_repository(const char* value, size_t size) {
  set_has_repository();
  repository_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:docker.spec.ImageReference.repository)
}
inline ::std::string* ImageReference::mutable_repository() {
  set_has_repository();
  // @@protoc_insertion_point(field_mutable:docker.spec.ImageReference.repository)
  return repository_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageReference::release_repository() {
  // @@protoc_insertion_point(field_release:docker.spec.ImageReference.repository)
  clear_has_repository();
  return repository_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageReference::set_allocated_repository(::std::string* repository) {
  if (repository != NULL) {
    set_has_repository();
  } else {
    clear_has_repository();
  }
  repository_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repository);
  // @@protoc_insertion_point(field_set_allocated:docker.spec.ImageReference.repository)
}

// optional string tag = 3;
inline bool ImageReference::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageReference::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageReference::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageReference::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& ImageReference::tag() const {
  // @@protoc_insertion_point(field_get:docker.spec.ImageReference.tag)
  return tag_.GetNoArena();
}
inline void ImageReference::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:docker.spec.ImageReference.tag)
}
#if LANG_CXX11
inline void ImageReference::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:docker.spec.ImageReference.tag)
}
#endif
inline void ImageReference::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:docker.spec.ImageReference.tag)
}
inline void ImageReference::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:docker.spec.ImageReference.tag)
}
inline ::std::string* ImageReference::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:docker.spec.ImageReference.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageReference::release_tag() {
  // @@protoc_insertion_point(field_release:docker.spec.ImageReference.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageReference::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:docker.spec.ImageReference.tag)
}

// optional string digest = 4;
inline bool ImageReference::has_digest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageReference::set_has_digest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageReference::clear_has_digest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageReference::clear_digest() {
  digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_digest();
}
inline const ::std::string& ImageReference::digest() const {
  // @@protoc_insertion_point(field_get:docker.spec.ImageReference.digest)
  return digest_.GetNoArena();
}
inline void ImageReference::set_digest(const ::std::string& value) {
  set_has_digest();
  digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:docker.spec.ImageReference.digest)
}
#if LANG_CXX11
inline void ImageReference::set_digest(::std::string&& value) {
  set_has_digest();
  digest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:docker.spec.ImageReference.digest)
}
#endif
inline void ImageReference::set_digest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_digest();
  digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:docker.spec.ImageReference.digest)
}
inline void ImageReference::set_digest(const char* value, size_t size) {
  set_has_digest();
  digest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:docker.spec.ImageReference.digest)
}
inline ::std::string* ImageReference::mutable_digest() {
  set_has_digest();
  // @@protoc_insertion_point(field_mutable:docker.spec.ImageReference.digest)
  return digest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageReference::release_digest() {
  // @@protoc_insertion_point(field_release:docker.spec.ImageReference.digest)
  clear_has_digest();
  return digest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageReference::set_allocated_digest(::std::string* digest) {
  if (digest != NULL) {
    set_has_digest();
  } else {
    clear_has_digest();
  }
  digest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), digest);
  // @@protoc_insertion_point(field_set_allocated:docker.spec.ImageReference.digest)
}

// -------------------------------------------------------------------

// Config_Auth

// optional string auth = 1;
inline bool Config_Auth::has_auth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config_Auth::set_has_auth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config_Auth::clear_has_auth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config_Auth::clear_auth() {
  auth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth();
}
inline const ::std::string& Config_Auth::auth() const {
  // @@protoc_insertion_point(field_get:docker.spec.Config.Auth.auth)
  return auth_.GetNoArena();
}
inline void Config_Auth::set_auth(const ::std::string& value) {
  set_has_auth();
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:docker.spec.Config.Auth.auth)
}
#if LANG_CXX11
inline void Config_Auth::set_auth(::std::string&& value) {
  set_has_auth();
  auth_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:docker.spec.Config.Auth.auth)
}
#endif
inline void Config_Auth::set_auth(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth();
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:docker.spec.Config.Auth.auth)
}
inline void Config_Auth::set_auth(const char* value, size_t size) {
  set_has_auth();
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:docker.spec.Config.Auth.auth)
}
inline ::std::string* Config_Auth::mutable_auth() {
  set_has_auth();
  // @@protoc_insertion_point(field_mutable:docker.spec.Config.Auth.auth)
  return auth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config_Auth::release_auth() {
  // @@protoc_insertion_point(field_release:docker.spec.Config.Auth.auth)
  clear_has_auth();
  return auth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config_Auth::set_allocated_auth(::std::string* auth) {
  if (auth != NULL) {
    set_has_auth();
  } else {
    clear_has_auth();
  }
  auth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:docker.spec.Config.Auth.auth)
}

// optional string email = 2;
inline bool Config_Auth::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config_Auth::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config_Auth::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config_Auth::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& Config_Auth::email() const {
  // @@protoc_insertion_point(field_get:docker.spec.Config.Auth.email)
  return email_.GetNoArena();
}
inline void Config_Auth::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:docker.spec.Config.Auth.email)
}
#if LANG_CXX11
inline void Config_Auth::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:docker.spec.Config.Auth.email)
}
#endif
inline void Config_Auth::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:docker.spec.Config.Auth.email)
}
inline void Config_Auth::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:docker.spec.Config.Auth.email)
}
inline ::std::string* Config_Auth::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:docker.spec.Config.Auth.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config_Auth::release_email() {
  // @@protoc_insertion_point(field_release:docker.spec.Config.Auth.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config_Auth::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:docker.spec.Config.Auth.email)
}

// -------------------------------------------------------------------

// Config

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spec
}  // namespace docker

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2fdocker_2fspec_2eproto__INCLUDED

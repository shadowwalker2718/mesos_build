// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/v1/executor/executor.proto

#ifndef PROTOBUF_mesos_2fv1_2fexecutor_2fexecutor_2eproto__INCLUDED
#define PROTOBUF_mesos_2fv1_2fexecutor_2fexecutor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos/v1/mesos.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEvent_SubscribedImpl();
void InitDefaultsEvent_Subscribed();
void InitDefaultsEvent_LaunchImpl();
void InitDefaultsEvent_Launch();
void InitDefaultsEvent_LaunchGroupImpl();
void InitDefaultsEvent_LaunchGroup();
void InitDefaultsEvent_KillImpl();
void InitDefaultsEvent_Kill();
void InitDefaultsEvent_AcknowledgedImpl();
void InitDefaultsEvent_Acknowledged();
void InitDefaultsEvent_MessageImpl();
void InitDefaultsEvent_Message();
void InitDefaultsEvent_ErrorImpl();
void InitDefaultsEvent_Error();
void InitDefaultsEventImpl();
void InitDefaultsEvent();
void InitDefaultsCall_SubscribeImpl();
void InitDefaultsCall_Subscribe();
void InitDefaultsCall_UpdateImpl();
void InitDefaultsCall_Update();
void InitDefaultsCall_MessageImpl();
void InitDefaultsCall_Message();
void InitDefaultsCallImpl();
void InitDefaultsCall();
inline void InitDefaults() {
  InitDefaultsEvent_Subscribed();
  InitDefaultsEvent_Launch();
  InitDefaultsEvent_LaunchGroup();
  InitDefaultsEvent_Kill();
  InitDefaultsEvent_Acknowledged();
  InitDefaultsEvent_Message();
  InitDefaultsEvent_Error();
  InitDefaultsEvent();
  InitDefaultsCall_Subscribe();
  InitDefaultsCall_Update();
  InitDefaultsCall_Message();
  InitDefaultsCall();
}
}  // namespace protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto
namespace mesos {
namespace v1 {
namespace executor {
class Call;
class CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class Call_Message;
class Call_MessageDefaultTypeInternal;
extern Call_MessageDefaultTypeInternal _Call_Message_default_instance_;
class Call_Subscribe;
class Call_SubscribeDefaultTypeInternal;
extern Call_SubscribeDefaultTypeInternal _Call_Subscribe_default_instance_;
class Call_Update;
class Call_UpdateDefaultTypeInternal;
extern Call_UpdateDefaultTypeInternal _Call_Update_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_Acknowledged;
class Event_AcknowledgedDefaultTypeInternal;
extern Event_AcknowledgedDefaultTypeInternal _Event_Acknowledged_default_instance_;
class Event_Error;
class Event_ErrorDefaultTypeInternal;
extern Event_ErrorDefaultTypeInternal _Event_Error_default_instance_;
class Event_Kill;
class Event_KillDefaultTypeInternal;
extern Event_KillDefaultTypeInternal _Event_Kill_default_instance_;
class Event_Launch;
class Event_LaunchDefaultTypeInternal;
extern Event_LaunchDefaultTypeInternal _Event_Launch_default_instance_;
class Event_LaunchGroup;
class Event_LaunchGroupDefaultTypeInternal;
extern Event_LaunchGroupDefaultTypeInternal _Event_LaunchGroup_default_instance_;
class Event_Message;
class Event_MessageDefaultTypeInternal;
extern Event_MessageDefaultTypeInternal _Event_Message_default_instance_;
class Event_Subscribed;
class Event_SubscribedDefaultTypeInternal;
extern Event_SubscribedDefaultTypeInternal _Event_Subscribed_default_instance_;
}  // namespace executor
}  // namespace v1
}  // namespace mesos
namespace mesos {
namespace v1 {
namespace executor {

enum Event_Type {
  Event_Type_UNKNOWN = 0,
  Event_Type_SUBSCRIBED = 1,
  Event_Type_LAUNCH = 2,
  Event_Type_LAUNCH_GROUP = 8,
  Event_Type_KILL = 3,
  Event_Type_ACKNOWLEDGED = 4,
  Event_Type_MESSAGE = 5,
  Event_Type_ERROR = 6,
  Event_Type_SHUTDOWN = 7
};
bool Event_Type_IsValid(int value);
const Event_Type Event_Type_Type_MIN = Event_Type_UNKNOWN;
const Event_Type Event_Type_Type_MAX = Event_Type_LAUNCH_GROUP;
const int Event_Type_Type_ARRAYSIZE = Event_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_Type_descriptor();
inline const ::std::string& Event_Type_Name(Event_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_Type_descriptor(), value);
}
inline bool Event_Type_Parse(
    const ::std::string& name, Event_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_Type>(
    Event_Type_descriptor(), name, value);
}
enum Call_Type {
  Call_Type_UNKNOWN = 0,
  Call_Type_SUBSCRIBE = 1,
  Call_Type_UPDATE = 2,
  Call_Type_MESSAGE = 3
};
bool Call_Type_IsValid(int value);
const Call_Type Call_Type_Type_MIN = Call_Type_UNKNOWN;
const Call_Type Call_Type_Type_MAX = Call_Type_MESSAGE;
const int Call_Type_Type_ARRAYSIZE = Call_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Call_Type_descriptor();
inline const ::std::string& Call_Type_Name(Call_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Call_Type_descriptor(), value);
}
inline bool Call_Type_Parse(
    const ::std::string& name, Call_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Call_Type>(
    Call_Type_descriptor(), name, value);
}
// ===================================================================

class Event_Subscribed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.v1.executor.Event.Subscribed) */ {
 public:
  Event_Subscribed();
  virtual ~Event_Subscribed();

  Event_Subscribed(const Event_Subscribed& from);

  inline Event_Subscribed& operator=(const Event_Subscribed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_Subscribed(Event_Subscribed&& from) noexcept
    : Event_Subscribed() {
    *this = ::std::move(from);
  }

  inline Event_Subscribed& operator=(Event_Subscribed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Subscribed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Subscribed* internal_default_instance() {
    return reinterpret_cast<const Event_Subscribed*>(
               &_Event_Subscribed_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Event_Subscribed* other);
  friend void swap(Event_Subscribed& a, Event_Subscribed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Subscribed* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_Subscribed* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_Subscribed& from);
  void MergeFrom(const Event_Subscribed& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_Subscribed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.v1.ExecutorInfo executor_info = 1;
  bool has_executor_info() const;
  void clear_executor_info();
  static const int kExecutorInfoFieldNumber = 1;
  const ::mesos::v1::ExecutorInfo& executor_info() const;
  ::mesos::v1::ExecutorInfo* release_executor_info();
  ::mesos::v1::ExecutorInfo* mutable_executor_info();
  void set_allocated_executor_info(::mesos::v1::ExecutorInfo* executor_info);

  // required .mesos.v1.FrameworkInfo framework_info = 2;
  bool has_framework_info() const;
  void clear_framework_info();
  static const int kFrameworkInfoFieldNumber = 2;
  const ::mesos::v1::FrameworkInfo& framework_info() const;
  ::mesos::v1::FrameworkInfo* release_framework_info();
  ::mesos::v1::FrameworkInfo* mutable_framework_info();
  void set_allocated_framework_info(::mesos::v1::FrameworkInfo* framework_info);

  // required .mesos.v1.AgentInfo agent_info = 3;
  bool has_agent_info() const;
  void clear_agent_info();
  static const int kAgentInfoFieldNumber = 3;
  const ::mesos::v1::AgentInfo& agent_info() const;
  ::mesos::v1::AgentInfo* release_agent_info();
  ::mesos::v1::AgentInfo* mutable_agent_info();
  void set_allocated_agent_info(::mesos::v1::AgentInfo* agent_info);

  // optional .mesos.v1.ContainerID container_id = 4;
  bool has_container_id() const;
  void clear_container_id();
  static const int kContainerIdFieldNumber = 4;
  const ::mesos::v1::ContainerID& container_id() const;
  ::mesos::v1::ContainerID* release_container_id();
  ::mesos::v1::ContainerID* mutable_container_id();
  void set_allocated_container_id(::mesos::v1::ContainerID* container_id);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.Subscribed)
 private:
  void set_has_executor_info();
  void clear_has_executor_info();
  void set_has_framework_info();
  void clear_has_framework_info();
  void set_has_agent_info();
  void clear_has_agent_info();
  void set_has_container_id();
  void clear_has_container_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::v1::ExecutorInfo* executor_info_;
  ::mesos::v1::FrameworkInfo* framework_info_;
  ::mesos::v1::AgentInfo* agent_info_;
  ::mesos::v1::ContainerID* container_id_;
  friend struct ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::InitDefaultsEvent_SubscribedImpl();
};
// -------------------------------------------------------------------

class Event_Launch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.v1.executor.Event.Launch) */ {
 public:
  Event_Launch();
  virtual ~Event_Launch();

  Event_Launch(const Event_Launch& from);

  inline Event_Launch& operator=(const Event_Launch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_Launch(Event_Launch&& from) noexcept
    : Event_Launch() {
    *this = ::std::move(from);
  }

  inline Event_Launch& operator=(Event_Launch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Launch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Launch* internal_default_instance() {
    return reinterpret_cast<const Event_Launch*>(
               &_Event_Launch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Event_Launch* other);
  friend void swap(Event_Launch& a, Event_Launch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Launch* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_Launch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_Launch& from);
  void MergeFrom(const Event_Launch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_Launch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.v1.TaskInfo task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  const ::mesos::v1::TaskInfo& task() const;
  ::mesos::v1::TaskInfo* release_task();
  ::mesos::v1::TaskInfo* mutable_task();
  void set_allocated_task(::mesos::v1::TaskInfo* task);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.Launch)
 private:
  void set_has_task();
  void clear_has_task();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::v1::TaskInfo* task_;
  friend struct ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::InitDefaultsEvent_LaunchImpl();
};
// -------------------------------------------------------------------

class Event_LaunchGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.v1.executor.Event.LaunchGroup) */ {
 public:
  Event_LaunchGroup();
  virtual ~Event_LaunchGroup();

  Event_LaunchGroup(const Event_LaunchGroup& from);

  inline Event_LaunchGroup& operator=(const Event_LaunchGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_LaunchGroup(Event_LaunchGroup&& from) noexcept
    : Event_LaunchGroup() {
    *this = ::std::move(from);
  }

  inline Event_LaunchGroup& operator=(Event_LaunchGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_LaunchGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_LaunchGroup* internal_default_instance() {
    return reinterpret_cast<const Event_LaunchGroup*>(
               &_Event_LaunchGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Event_LaunchGroup* other);
  friend void swap(Event_LaunchGroup& a, Event_LaunchGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_LaunchGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_LaunchGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_LaunchGroup& from);
  void MergeFrom(const Event_LaunchGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_LaunchGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.v1.TaskGroupInfo task_group = 1;
  bool has_task_group() const;
  void clear_task_group();
  static const int kTaskGroupFieldNumber = 1;
  const ::mesos::v1::TaskGroupInfo& task_group() const;
  ::mesos::v1::TaskGroupInfo* release_task_group();
  ::mesos::v1::TaskGroupInfo* mutable_task_group();
  void set_allocated_task_group(::mesos::v1::TaskGroupInfo* task_group);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.LaunchGroup)
 private:
  void set_has_task_group();
  void clear_has_task_group();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::v1::TaskGroupInfo* task_group_;
  friend struct ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::InitDefaultsEvent_LaunchGroupImpl();
};
// -------------------------------------------------------------------

class Event_Kill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.v1.executor.Event.Kill) */ {
 public:
  Event_Kill();
  virtual ~Event_Kill();

  Event_Kill(const Event_Kill& from);

  inline Event_Kill& operator=(const Event_Kill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_Kill(Event_Kill&& from) noexcept
    : Event_Kill() {
    *this = ::std::move(from);
  }

  inline Event_Kill& operator=(Event_Kill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Kill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Kill* internal_default_instance() {
    return reinterpret_cast<const Event_Kill*>(
               &_Event_Kill_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Event_Kill* other);
  friend void swap(Event_Kill& a, Event_Kill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Kill* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_Kill* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_Kill& from);
  void MergeFrom(const Event_Kill& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_Kill* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.v1.TaskID task_id = 1;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  const ::mesos::v1::TaskID& task_id() const;
  ::mesos::v1::TaskID* release_task_id();
  ::mesos::v1::TaskID* mutable_task_id();
  void set_allocated_task_id(::mesos::v1::TaskID* task_id);

  // optional .mesos.v1.KillPolicy kill_policy = 2;
  bool has_kill_policy() const;
  void clear_kill_policy();
  static const int kKillPolicyFieldNumber = 2;
  const ::mesos::v1::KillPolicy& kill_policy() const;
  ::mesos::v1::KillPolicy* release_kill_policy();
  ::mesos::v1::KillPolicy* mutable_kill_policy();
  void set_allocated_kill_policy(::mesos::v1::KillPolicy* kill_policy);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.Kill)
 private:
  void set_has_task_id();
  void clear_has_task_id();
  void set_has_kill_policy();
  void clear_has_kill_policy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::v1::TaskID* task_id_;
  ::mesos::v1::KillPolicy* kill_policy_;
  friend struct ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::InitDefaultsEvent_KillImpl();
};
// -------------------------------------------------------------------

class Event_Acknowledged : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.v1.executor.Event.Acknowledged) */ {
 public:
  Event_Acknowledged();
  virtual ~Event_Acknowledged();

  Event_Acknowledged(const Event_Acknowledged& from);

  inline Event_Acknowledged& operator=(const Event_Acknowledged& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_Acknowledged(Event_Acknowledged&& from) noexcept
    : Event_Acknowledged() {
    *this = ::std::move(from);
  }

  inline Event_Acknowledged& operator=(Event_Acknowledged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Acknowledged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Acknowledged* internal_default_instance() {
    return reinterpret_cast<const Event_Acknowledged*>(
               &_Event_Acknowledged_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Event_Acknowledged* other);
  friend void swap(Event_Acknowledged& a, Event_Acknowledged& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Acknowledged* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_Acknowledged* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_Acknowledged& from);
  void MergeFrom(const Event_Acknowledged& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_Acknowledged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes uuid = 2;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // required .mesos.v1.TaskID task_id = 1;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  const ::mesos::v1::TaskID& task_id() const;
  ::mesos::v1::TaskID* release_task_id();
  ::mesos::v1::TaskID* mutable_task_id();
  void set_allocated_task_id(::mesos::v1::TaskID* task_id);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.Acknowledged)
 private:
  void set_has_task_id();
  void clear_has_task_id();
  void set_has_uuid();
  void clear_has_uuid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::mesos::v1::TaskID* task_id_;
  friend struct ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::InitDefaultsEvent_AcknowledgedImpl();
};
// -------------------------------------------------------------------

class Event_Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.v1.executor.Event.Message) */ {
 public:
  Event_Message();
  virtual ~Event_Message();

  Event_Message(const Event_Message& from);

  inline Event_Message& operator=(const Event_Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_Message(Event_Message&& from) noexcept
    : Event_Message() {
    *this = ::std::move(from);
  }

  inline Event_Message& operator=(Event_Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Message* internal_default_instance() {
    return reinterpret_cast<const Event_Message*>(
               &_Event_Message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Event_Message* other);
  friend void swap(Event_Message& a, Event_Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_Message& from);
  void MergeFrom(const Event_Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.Message)
 private:
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend struct ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::InitDefaultsEvent_MessageImpl();
};
// -------------------------------------------------------------------

class Event_Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.v1.executor.Event.Error) */ {
 public:
  Event_Error();
  virtual ~Event_Error();

  Event_Error(const Event_Error& from);

  inline Event_Error& operator=(const Event_Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_Error(Event_Error&& from) noexcept
    : Event_Error() {
    *this = ::std::move(from);
  }

  inline Event_Error& operator=(Event_Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Error* internal_default_instance() {
    return reinterpret_cast<const Event_Error*>(
               &_Event_Error_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Event_Error* other);
  friend void swap(Event_Error& a, Event_Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Error* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_Error* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_Error& from);
  void MergeFrom(const Event_Error& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.Error)
 private:
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend struct ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::InitDefaultsEvent_ErrorImpl();
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.v1.executor.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Event_Subscribed Subscribed;
  typedef Event_Launch Launch;
  typedef Event_LaunchGroup LaunchGroup;
  typedef Event_Kill Kill;
  typedef Event_Acknowledged Acknowledged;
  typedef Event_Message Message;
  typedef Event_Error Error;

  typedef Event_Type Type;
  static const Type UNKNOWN =
    Event_Type_UNKNOWN;
  static const Type SUBSCRIBED =
    Event_Type_SUBSCRIBED;
  static const Type LAUNCH =
    Event_Type_LAUNCH;
  static const Type LAUNCH_GROUP =
    Event_Type_LAUNCH_GROUP;
  static const Type KILL =
    Event_Type_KILL;
  static const Type ACKNOWLEDGED =
    Event_Type_ACKNOWLEDGED;
  static const Type MESSAGE =
    Event_Type_MESSAGE;
  static const Type ERROR =
    Event_Type_ERROR;
  static const Type SHUTDOWN =
    Event_Type_SHUTDOWN;
  static inline bool Type_IsValid(int value) {
    return Event_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Event_Type_Type_MIN;
  static const Type Type_MAX =
    Event_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Event_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Event_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Event_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Event_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .mesos.v1.executor.Event.Subscribed subscribed = 2;
  bool has_subscribed() const;
  void clear_subscribed();
  static const int kSubscribedFieldNumber = 2;
  const ::mesos::v1::executor::Event_Subscribed& subscribed() const;
  ::mesos::v1::executor::Event_Subscribed* release_subscribed();
  ::mesos::v1::executor::Event_Subscribed* mutable_subscribed();
  void set_allocated_subscribed(::mesos::v1::executor::Event_Subscribed* subscribed);

  // optional .mesos.v1.executor.Event.Acknowledged acknowledged = 3;
  bool has_acknowledged() const;
  void clear_acknowledged();
  static const int kAcknowledgedFieldNumber = 3;
  const ::mesos::v1::executor::Event_Acknowledged& acknowledged() const;
  ::mesos::v1::executor::Event_Acknowledged* release_acknowledged();
  ::mesos::v1::executor::Event_Acknowledged* mutable_acknowledged();
  void set_allocated_acknowledged(::mesos::v1::executor::Event_Acknowledged* acknowledged);

  // optional .mesos.v1.executor.Event.Launch launch = 4;
  bool has_launch() const;
  void clear_launch();
  static const int kLaunchFieldNumber = 4;
  const ::mesos::v1::executor::Event_Launch& launch() const;
  ::mesos::v1::executor::Event_Launch* release_launch();
  ::mesos::v1::executor::Event_Launch* mutable_launch();
  void set_allocated_launch(::mesos::v1::executor::Event_Launch* launch);

  // optional .mesos.v1.executor.Event.Kill kill = 5;
  bool has_kill() const;
  void clear_kill();
  static const int kKillFieldNumber = 5;
  const ::mesos::v1::executor::Event_Kill& kill() const;
  ::mesos::v1::executor::Event_Kill* release_kill();
  ::mesos::v1::executor::Event_Kill* mutable_kill();
  void set_allocated_kill(::mesos::v1::executor::Event_Kill* kill);

  // optional .mesos.v1.executor.Event.Message message = 6;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 6;
  const ::mesos::v1::executor::Event_Message& message() const;
  ::mesos::v1::executor::Event_Message* release_message();
  ::mesos::v1::executor::Event_Message* mutable_message();
  void set_allocated_message(::mesos::v1::executor::Event_Message* message);

  // optional .mesos.v1.executor.Event.Error error = 7;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 7;
  const ::mesos::v1::executor::Event_Error& error() const;
  ::mesos::v1::executor::Event_Error* release_error();
  ::mesos::v1::executor::Event_Error* mutable_error();
  void set_allocated_error(::mesos::v1::executor::Event_Error* error);

  // optional .mesos.v1.executor.Event.LaunchGroup launch_group = 8;
  bool has_launch_group() const;
  void clear_launch_group();
  static const int kLaunchGroupFieldNumber = 8;
  const ::mesos::v1::executor::Event_LaunchGroup& launch_group() const;
  ::mesos::v1::executor::Event_LaunchGroup* release_launch_group();
  ::mesos::v1::executor::Event_LaunchGroup* mutable_launch_group();
  void set_allocated_launch_group(::mesos::v1::executor::Event_LaunchGroup* launch_group);

  // optional .mesos.v1.executor.Event.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::mesos::v1::executor::Event_Type type() const;
  void set_type(::mesos::v1::executor::Event_Type value);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_subscribed();
  void clear_has_subscribed();
  void set_has_acknowledged();
  void clear_has_acknowledged();
  void set_has_launch();
  void clear_has_launch();
  void set_has_launch_group();
  void clear_has_launch_group();
  void set_has_kill();
  void clear_has_kill();
  void set_has_message();
  void clear_has_message();
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::v1::executor::Event_Subscribed* subscribed_;
  ::mesos::v1::executor::Event_Acknowledged* acknowledged_;
  ::mesos::v1::executor::Event_Launch* launch_;
  ::mesos::v1::executor::Event_Kill* kill_;
  ::mesos::v1::executor::Event_Message* message_;
  ::mesos::v1::executor::Event_Error* error_;
  ::mesos::v1::executor::Event_LaunchGroup* launch_group_;
  int type_;
  friend struct ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::InitDefaultsEventImpl();
};
// -------------------------------------------------------------------

class Call_Subscribe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.v1.executor.Call.Subscribe) */ {
 public:
  Call_Subscribe();
  virtual ~Call_Subscribe();

  Call_Subscribe(const Call_Subscribe& from);

  inline Call_Subscribe& operator=(const Call_Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call_Subscribe(Call_Subscribe&& from) noexcept
    : Call_Subscribe() {
    *this = ::std::move(from);
  }

  inline Call_Subscribe& operator=(Call_Subscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_Subscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call_Subscribe* internal_default_instance() {
    return reinterpret_cast<const Call_Subscribe*>(
               &_Call_Subscribe_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Call_Subscribe* other);
  friend void swap(Call_Subscribe& a, Call_Subscribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call_Subscribe* New() const PROTOBUF_FINAL { return New(NULL); }

  Call_Subscribe* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Call_Subscribe& from);
  void MergeFrom(const Call_Subscribe& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Call_Subscribe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.v1.TaskInfo unacknowledged_tasks = 1;
  int unacknowledged_tasks_size() const;
  void clear_unacknowledged_tasks();
  static const int kUnacknowledgedTasksFieldNumber = 1;
  const ::mesos::v1::TaskInfo& unacknowledged_tasks(int index) const;
  ::mesos::v1::TaskInfo* mutable_unacknowledged_tasks(int index);
  ::mesos::v1::TaskInfo* add_unacknowledged_tasks();
  ::google::protobuf::RepeatedPtrField< ::mesos::v1::TaskInfo >*
      mutable_unacknowledged_tasks();
  const ::google::protobuf::RepeatedPtrField< ::mesos::v1::TaskInfo >&
      unacknowledged_tasks() const;

  // repeated .mesos.v1.executor.Call.Update unacknowledged_updates = 2;
  int unacknowledged_updates_size() const;
  void clear_unacknowledged_updates();
  static const int kUnacknowledgedUpdatesFieldNumber = 2;
  const ::mesos::v1::executor::Call_Update& unacknowledged_updates(int index) const;
  ::mesos::v1::executor::Call_Update* mutable_unacknowledged_updates(int index);
  ::mesos::v1::executor::Call_Update* add_unacknowledged_updates();
  ::google::protobuf::RepeatedPtrField< ::mesos::v1::executor::Call_Update >*
      mutable_unacknowledged_updates();
  const ::google::protobuf::RepeatedPtrField< ::mesos::v1::executor::Call_Update >&
      unacknowledged_updates() const;

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Call.Subscribe)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::v1::TaskInfo > unacknowledged_tasks_;
  ::google::protobuf::RepeatedPtrField< ::mesos::v1::executor::Call_Update > unacknowledged_updates_;
  friend struct ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::InitDefaultsCall_SubscribeImpl();
};
// -------------------------------------------------------------------

class Call_Update : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.v1.executor.Call.Update) */ {
 public:
  Call_Update();
  virtual ~Call_Update();

  Call_Update(const Call_Update& from);

  inline Call_Update& operator=(const Call_Update& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call_Update(Call_Update&& from) noexcept
    : Call_Update() {
    *this = ::std::move(from);
  }

  inline Call_Update& operator=(Call_Update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_Update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call_Update* internal_default_instance() {
    return reinterpret_cast<const Call_Update*>(
               &_Call_Update_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Call_Update* other);
  friend void swap(Call_Update& a, Call_Update& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call_Update* New() const PROTOBUF_FINAL { return New(NULL); }

  Call_Update* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Call_Update& from);
  void MergeFrom(const Call_Update& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Call_Update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.v1.TaskStatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::mesos::v1::TaskStatus& status() const;
  ::mesos::v1::TaskStatus* release_status();
  ::mesos::v1::TaskStatus* mutable_status();
  void set_allocated_status(::mesos::v1::TaskStatus* status);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Call.Update)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::v1::TaskStatus* status_;
  friend struct ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::InitDefaultsCall_UpdateImpl();
};
// -------------------------------------------------------------------

class Call_Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.v1.executor.Call.Message) */ {
 public:
  Call_Message();
  virtual ~Call_Message();

  Call_Message(const Call_Message& from);

  inline Call_Message& operator=(const Call_Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call_Message(Call_Message&& from) noexcept
    : Call_Message() {
    *this = ::std::move(from);
  }

  inline Call_Message& operator=(Call_Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call_Message* internal_default_instance() {
    return reinterpret_cast<const Call_Message*>(
               &_Call_Message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Call_Message* other);
  friend void swap(Call_Message& a, Call_Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call_Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Call_Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Call_Message& from);
  void MergeFrom(const Call_Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Call_Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Call.Message)
 private:
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend struct ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::InitDefaultsCall_MessageImpl();
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.v1.executor.Call) */ {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(Call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Call* other);
  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const PROTOBUF_FINAL { return New(NULL); }

  Call* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Call* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Call_Subscribe Subscribe;
  typedef Call_Update Update;
  typedef Call_Message Message;

  typedef Call_Type Type;
  static const Type UNKNOWN =
    Call_Type_UNKNOWN;
  static const Type SUBSCRIBE =
    Call_Type_SUBSCRIBE;
  static const Type UPDATE =
    Call_Type_UPDATE;
  static const Type MESSAGE =
    Call_Type_MESSAGE;
  static inline bool Type_IsValid(int value) {
    return Call_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Call_Type_Type_MIN;
  static const Type Type_MAX =
    Call_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Call_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Call_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Call_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Call_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .mesos.v1.ExecutorID executor_id = 1;
  bool has_executor_id() const;
  void clear_executor_id();
  static const int kExecutorIdFieldNumber = 1;
  const ::mesos::v1::ExecutorID& executor_id() const;
  ::mesos::v1::ExecutorID* release_executor_id();
  ::mesos::v1::ExecutorID* mutable_executor_id();
  void set_allocated_executor_id(::mesos::v1::ExecutorID* executor_id);

  // required .mesos.v1.FrameworkID framework_id = 2;
  bool has_framework_id() const;
  void clear_framework_id();
  static const int kFrameworkIdFieldNumber = 2;
  const ::mesos::v1::FrameworkID& framework_id() const;
  ::mesos::v1::FrameworkID* release_framework_id();
  ::mesos::v1::FrameworkID* mutable_framework_id();
  void set_allocated_framework_id(::mesos::v1::FrameworkID* framework_id);

  // optional .mesos.v1.executor.Call.Subscribe subscribe = 4;
  bool has_subscribe() const;
  void clear_subscribe();
  static const int kSubscribeFieldNumber = 4;
  const ::mesos::v1::executor::Call_Subscribe& subscribe() const;
  ::mesos::v1::executor::Call_Subscribe* release_subscribe();
  ::mesos::v1::executor::Call_Subscribe* mutable_subscribe();
  void set_allocated_subscribe(::mesos::v1::executor::Call_Subscribe* subscribe);

  // optional .mesos.v1.executor.Call.Update update = 5;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 5;
  const ::mesos::v1::executor::Call_Update& update() const;
  ::mesos::v1::executor::Call_Update* release_update();
  ::mesos::v1::executor::Call_Update* mutable_update();
  void set_allocated_update(::mesos::v1::executor::Call_Update* update);

  // optional .mesos.v1.executor.Call.Message message = 6;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 6;
  const ::mesos::v1::executor::Call_Message& message() const;
  ::mesos::v1::executor::Call_Message* release_message();
  ::mesos::v1::executor::Call_Message* mutable_message();
  void set_allocated_message(::mesos::v1::executor::Call_Message* message);

  // optional .mesos.v1.executor.Call.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::mesos::v1::executor::Call_Type type() const;
  void set_type(::mesos::v1::executor::Call_Type value);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Call)
 private:
  void set_has_executor_id();
  void clear_has_executor_id();
  void set_has_framework_id();
  void clear_has_framework_id();
  void set_has_type();
  void clear_has_type();
  void set_has_subscribe();
  void clear_has_subscribe();
  void set_has_update();
  void clear_has_update();
  void set_has_message();
  void clear_has_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::v1::ExecutorID* executor_id_;
  ::mesos::v1::FrameworkID* framework_id_;
  ::mesos::v1::executor::Call_Subscribe* subscribe_;
  ::mesos::v1::executor::Call_Update* update_;
  ::mesos::v1::executor::Call_Message* message_;
  int type_;
  friend struct ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fv1_2fexecutor_2fexecutor_2eproto::InitDefaultsCallImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event_Subscribed

// required .mesos.v1.ExecutorInfo executor_info = 1;
inline bool Event_Subscribed::has_executor_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Subscribed::set_has_executor_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Subscribed::clear_has_executor_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::v1::ExecutorInfo& Event_Subscribed::executor_info() const {
  const ::mesos::v1::ExecutorInfo* p = executor_info_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.Subscribed.executor_info)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::ExecutorInfo*>(
      &::mesos::v1::_ExecutorInfo_default_instance_);
}
inline ::mesos::v1::ExecutorInfo* Event_Subscribed::release_executor_info() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.Subscribed.executor_info)
  clear_has_executor_info();
  ::mesos::v1::ExecutorInfo* temp = executor_info_;
  executor_info_ = NULL;
  return temp;
}
inline ::mesos::v1::ExecutorInfo* Event_Subscribed::mutable_executor_info() {
  set_has_executor_info();
  if (executor_info_ == NULL) {
    executor_info_ = new ::mesos::v1::ExecutorInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.Subscribed.executor_info)
  return executor_info_;
}
inline void Event_Subscribed::set_allocated_executor_info(::mesos::v1::ExecutorInfo* executor_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(executor_info_);
  }
  if (executor_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      executor_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, executor_info, submessage_arena);
    }
    set_has_executor_info();
  } else {
    clear_has_executor_info();
  }
  executor_info_ = executor_info;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.Subscribed.executor_info)
}

// required .mesos.v1.FrameworkInfo framework_info = 2;
inline bool Event_Subscribed::has_framework_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Subscribed::set_has_framework_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Subscribed::clear_has_framework_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mesos::v1::FrameworkInfo& Event_Subscribed::framework_info() const {
  const ::mesos::v1::FrameworkInfo* p = framework_info_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.Subscribed.framework_info)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::FrameworkInfo*>(
      &::mesos::v1::_FrameworkInfo_default_instance_);
}
inline ::mesos::v1::FrameworkInfo* Event_Subscribed::release_framework_info() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.Subscribed.framework_info)
  clear_has_framework_info();
  ::mesos::v1::FrameworkInfo* temp = framework_info_;
  framework_info_ = NULL;
  return temp;
}
inline ::mesos::v1::FrameworkInfo* Event_Subscribed::mutable_framework_info() {
  set_has_framework_info();
  if (framework_info_ == NULL) {
    framework_info_ = new ::mesos::v1::FrameworkInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.Subscribed.framework_info)
  return framework_info_;
}
inline void Event_Subscribed::set_allocated_framework_info(::mesos::v1::FrameworkInfo* framework_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(framework_info_);
  }
  if (framework_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      framework_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, framework_info, submessage_arena);
    }
    set_has_framework_info();
  } else {
    clear_has_framework_info();
  }
  framework_info_ = framework_info;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.Subscribed.framework_info)
}

// required .mesos.v1.AgentInfo agent_info = 3;
inline bool Event_Subscribed::has_agent_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Subscribed::set_has_agent_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Subscribed::clear_has_agent_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mesos::v1::AgentInfo& Event_Subscribed::agent_info() const {
  const ::mesos::v1::AgentInfo* p = agent_info_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.Subscribed.agent_info)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::AgentInfo*>(
      &::mesos::v1::_AgentInfo_default_instance_);
}
inline ::mesos::v1::AgentInfo* Event_Subscribed::release_agent_info() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.Subscribed.agent_info)
  clear_has_agent_info();
  ::mesos::v1::AgentInfo* temp = agent_info_;
  agent_info_ = NULL;
  return temp;
}
inline ::mesos::v1::AgentInfo* Event_Subscribed::mutable_agent_info() {
  set_has_agent_info();
  if (agent_info_ == NULL) {
    agent_info_ = new ::mesos::v1::AgentInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.Subscribed.agent_info)
  return agent_info_;
}
inline void Event_Subscribed::set_allocated_agent_info(::mesos::v1::AgentInfo* agent_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(agent_info_);
  }
  if (agent_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      agent_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, agent_info, submessage_arena);
    }
    set_has_agent_info();
  } else {
    clear_has_agent_info();
  }
  agent_info_ = agent_info;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.Subscribed.agent_info)
}

// optional .mesos.v1.ContainerID container_id = 4;
inline bool Event_Subscribed::has_container_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_Subscribed::set_has_container_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_Subscribed::clear_has_container_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mesos::v1::ContainerID& Event_Subscribed::container_id() const {
  const ::mesos::v1::ContainerID* p = container_id_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.Subscribed.container_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::ContainerID*>(
      &::mesos::v1::_ContainerID_default_instance_);
}
inline ::mesos::v1::ContainerID* Event_Subscribed::release_container_id() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.Subscribed.container_id)
  clear_has_container_id();
  ::mesos::v1::ContainerID* temp = container_id_;
  container_id_ = NULL;
  return temp;
}
inline ::mesos::v1::ContainerID* Event_Subscribed::mutable_container_id() {
  set_has_container_id();
  if (container_id_ == NULL) {
    container_id_ = new ::mesos::v1::ContainerID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.Subscribed.container_id)
  return container_id_;
}
inline void Event_Subscribed::set_allocated_container_id(::mesos::v1::ContainerID* container_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(container_id_);
  }
  if (container_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      container_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, container_id, submessage_arena);
    }
    set_has_container_id();
  } else {
    clear_has_container_id();
  }
  container_id_ = container_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.Subscribed.container_id)
}

// -------------------------------------------------------------------

// Event_Launch

// required .mesos.v1.TaskInfo task = 1;
inline bool Event_Launch::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Launch::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Launch::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::v1::TaskInfo& Event_Launch::task() const {
  const ::mesos::v1::TaskInfo* p = task_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.Launch.task)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::TaskInfo*>(
      &::mesos::v1::_TaskInfo_default_instance_);
}
inline ::mesos::v1::TaskInfo* Event_Launch::release_task() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.Launch.task)
  clear_has_task();
  ::mesos::v1::TaskInfo* temp = task_;
  task_ = NULL;
  return temp;
}
inline ::mesos::v1::TaskInfo* Event_Launch::mutable_task() {
  set_has_task();
  if (task_ == NULL) {
    task_ = new ::mesos::v1::TaskInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.Launch.task)
  return task_;
}
inline void Event_Launch::set_allocated_task(::mesos::v1::TaskInfo* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_);
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    set_has_task();
  } else {
    clear_has_task();
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.Launch.task)
}

// -------------------------------------------------------------------

// Event_LaunchGroup

// required .mesos.v1.TaskGroupInfo task_group = 1;
inline bool Event_LaunchGroup::has_task_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_LaunchGroup::set_has_task_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_LaunchGroup::clear_has_task_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::v1::TaskGroupInfo& Event_LaunchGroup::task_group() const {
  const ::mesos::v1::TaskGroupInfo* p = task_group_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.LaunchGroup.task_group)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::TaskGroupInfo*>(
      &::mesos::v1::_TaskGroupInfo_default_instance_);
}
inline ::mesos::v1::TaskGroupInfo* Event_LaunchGroup::release_task_group() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.LaunchGroup.task_group)
  clear_has_task_group();
  ::mesos::v1::TaskGroupInfo* temp = task_group_;
  task_group_ = NULL;
  return temp;
}
inline ::mesos::v1::TaskGroupInfo* Event_LaunchGroup::mutable_task_group() {
  set_has_task_group();
  if (task_group_ == NULL) {
    task_group_ = new ::mesos::v1::TaskGroupInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.LaunchGroup.task_group)
  return task_group_;
}
inline void Event_LaunchGroup::set_allocated_task_group(::mesos::v1::TaskGroupInfo* task_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_group_);
  }
  if (task_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_group, submessage_arena);
    }
    set_has_task_group();
  } else {
    clear_has_task_group();
  }
  task_group_ = task_group;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.LaunchGroup.task_group)
}

// -------------------------------------------------------------------

// Event_Kill

// required .mesos.v1.TaskID task_id = 1;
inline bool Event_Kill::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Kill::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Kill::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::v1::TaskID& Event_Kill::task_id() const {
  const ::mesos::v1::TaskID* p = task_id_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.Kill.task_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::TaskID*>(
      &::mesos::v1::_TaskID_default_instance_);
}
inline ::mesos::v1::TaskID* Event_Kill::release_task_id() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.Kill.task_id)
  clear_has_task_id();
  ::mesos::v1::TaskID* temp = task_id_;
  task_id_ = NULL;
  return temp;
}
inline ::mesos::v1::TaskID* Event_Kill::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == NULL) {
    task_id_ = new ::mesos::v1::TaskID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.Kill.task_id)
  return task_id_;
}
inline void Event_Kill::set_allocated_task_id(::mesos::v1::TaskID* task_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_id_);
  }
  if (task_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_id, submessage_arena);
    }
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_ = task_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.Kill.task_id)
}

// optional .mesos.v1.KillPolicy kill_policy = 2;
inline bool Event_Kill::has_kill_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Kill::set_has_kill_policy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Kill::clear_has_kill_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mesos::v1::KillPolicy& Event_Kill::kill_policy() const {
  const ::mesos::v1::KillPolicy* p = kill_policy_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.Kill.kill_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::KillPolicy*>(
      &::mesos::v1::_KillPolicy_default_instance_);
}
inline ::mesos::v1::KillPolicy* Event_Kill::release_kill_policy() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.Kill.kill_policy)
  clear_has_kill_policy();
  ::mesos::v1::KillPolicy* temp = kill_policy_;
  kill_policy_ = NULL;
  return temp;
}
inline ::mesos::v1::KillPolicy* Event_Kill::mutable_kill_policy() {
  set_has_kill_policy();
  if (kill_policy_ == NULL) {
    kill_policy_ = new ::mesos::v1::KillPolicy;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.Kill.kill_policy)
  return kill_policy_;
}
inline void Event_Kill::set_allocated_kill_policy(::mesos::v1::KillPolicy* kill_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(kill_policy_);
  }
  if (kill_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kill_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kill_policy, submessage_arena);
    }
    set_has_kill_policy();
  } else {
    clear_has_kill_policy();
  }
  kill_policy_ = kill_policy;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.Kill.kill_policy)
}

// -------------------------------------------------------------------

// Event_Acknowledged

// required .mesos.v1.TaskID task_id = 1;
inline bool Event_Acknowledged::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Acknowledged::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Acknowledged::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mesos::v1::TaskID& Event_Acknowledged::task_id() const {
  const ::mesos::v1::TaskID* p = task_id_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.Acknowledged.task_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::TaskID*>(
      &::mesos::v1::_TaskID_default_instance_);
}
inline ::mesos::v1::TaskID* Event_Acknowledged::release_task_id() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.Acknowledged.task_id)
  clear_has_task_id();
  ::mesos::v1::TaskID* temp = task_id_;
  task_id_ = NULL;
  return temp;
}
inline ::mesos::v1::TaskID* Event_Acknowledged::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == NULL) {
    task_id_ = new ::mesos::v1::TaskID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.Acknowledged.task_id)
  return task_id_;
}
inline void Event_Acknowledged::set_allocated_task_id(::mesos::v1::TaskID* task_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_id_);
  }
  if (task_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_id, submessage_arena);
    }
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_ = task_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.Acknowledged.task_id)
}

// required bytes uuid = 2;
inline bool Event_Acknowledged::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Acknowledged::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Acknowledged::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Acknowledged::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& Event_Acknowledged::uuid() const {
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.Acknowledged.uuid)
  return uuid_.GetNoArena();
}
inline void Event_Acknowledged::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.v1.executor.Event.Acknowledged.uuid)
}
#if LANG_CXX11
inline void Event_Acknowledged::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.v1.executor.Event.Acknowledged.uuid)
}
#endif
inline void Event_Acknowledged::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.v1.executor.Event.Acknowledged.uuid)
}
inline void Event_Acknowledged::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.v1.executor.Event.Acknowledged.uuid)
}
inline ::std::string* Event_Acknowledged::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.Acknowledged.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event_Acknowledged::release_uuid() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.Acknowledged.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event_Acknowledged::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.Acknowledged.uuid)
}

// -------------------------------------------------------------------

// Event_Message

// required bytes data = 1;
inline bool Event_Message::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Message::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Message::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Message::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Event_Message::data() const {
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.Message.data)
  return data_.GetNoArena();
}
inline void Event_Message::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.v1.executor.Event.Message.data)
}
#if LANG_CXX11
inline void Event_Message::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.v1.executor.Event.Message.data)
}
#endif
inline void Event_Message::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.v1.executor.Event.Message.data)
}
inline void Event_Message::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.v1.executor.Event.Message.data)
}
inline ::std::string* Event_Message::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.Message.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event_Message::release_data() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.Message.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event_Message::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.Message.data)
}

// -------------------------------------------------------------------

// Event_Error

// required string message = 1;
inline bool Event_Error::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Error::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Error::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& Event_Error::message() const {
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.Error.message)
  return message_.GetNoArena();
}
inline void Event_Error::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.v1.executor.Event.Error.message)
}
#if LANG_CXX11
inline void Event_Error::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.v1.executor.Event.Error.message)
}
#endif
inline void Event_Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.v1.executor.Event.Error.message)
}
inline void Event_Error::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.v1.executor.Event.Error.message)
}
inline ::std::string* Event_Error::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event_Error::release_message() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.Error.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event_Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.Error.message)
}

// -------------------------------------------------------------------

// Event

// optional .mesos.v1.executor.Event.Type type = 1;
inline bool Event::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Event::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::mesos::v1::executor::Event_Type Event::type() const {
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.type)
  return static_cast< ::mesos::v1::executor::Event_Type >(type_);
}
inline void Event::set_type(::mesos::v1::executor::Event_Type value) {
  assert(::mesos::v1::executor::Event_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mesos.v1.executor.Event.type)
}

// optional .mesos.v1.executor.Event.Subscribed subscribed = 2;
inline bool Event::has_subscribed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_subscribed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_subscribed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_subscribed() {
  if (subscribed_ != NULL) subscribed_->Clear();
  clear_has_subscribed();
}
inline const ::mesos::v1::executor::Event_Subscribed& Event::subscribed() const {
  const ::mesos::v1::executor::Event_Subscribed* p = subscribed_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.subscribed)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::executor::Event_Subscribed*>(
      &::mesos::v1::executor::_Event_Subscribed_default_instance_);
}
inline ::mesos::v1::executor::Event_Subscribed* Event::release_subscribed() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.subscribed)
  clear_has_subscribed();
  ::mesos::v1::executor::Event_Subscribed* temp = subscribed_;
  subscribed_ = NULL;
  return temp;
}
inline ::mesos::v1::executor::Event_Subscribed* Event::mutable_subscribed() {
  set_has_subscribed();
  if (subscribed_ == NULL) {
    subscribed_ = new ::mesos::v1::executor::Event_Subscribed;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.subscribed)
  return subscribed_;
}
inline void Event::set_allocated_subscribed(::mesos::v1::executor::Event_Subscribed* subscribed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete subscribed_;
  }
  if (subscribed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subscribed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subscribed, submessage_arena);
    }
    set_has_subscribed();
  } else {
    clear_has_subscribed();
  }
  subscribed_ = subscribed;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.subscribed)
}

// optional .mesos.v1.executor.Event.Acknowledged acknowledged = 3;
inline bool Event::has_acknowledged() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_acknowledged() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_acknowledged() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_acknowledged() {
  if (acknowledged_ != NULL) acknowledged_->Clear();
  clear_has_acknowledged();
}
inline const ::mesos::v1::executor::Event_Acknowledged& Event::acknowledged() const {
  const ::mesos::v1::executor::Event_Acknowledged* p = acknowledged_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.acknowledged)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::executor::Event_Acknowledged*>(
      &::mesos::v1::executor::_Event_Acknowledged_default_instance_);
}
inline ::mesos::v1::executor::Event_Acknowledged* Event::release_acknowledged() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.acknowledged)
  clear_has_acknowledged();
  ::mesos::v1::executor::Event_Acknowledged* temp = acknowledged_;
  acknowledged_ = NULL;
  return temp;
}
inline ::mesos::v1::executor::Event_Acknowledged* Event::mutable_acknowledged() {
  set_has_acknowledged();
  if (acknowledged_ == NULL) {
    acknowledged_ = new ::mesos::v1::executor::Event_Acknowledged;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.acknowledged)
  return acknowledged_;
}
inline void Event::set_allocated_acknowledged(::mesos::v1::executor::Event_Acknowledged* acknowledged) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acknowledged_;
  }
  if (acknowledged) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acknowledged = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acknowledged, submessage_arena);
    }
    set_has_acknowledged();
  } else {
    clear_has_acknowledged();
  }
  acknowledged_ = acknowledged;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.acknowledged)
}

// optional .mesos.v1.executor.Event.Launch launch = 4;
inline bool Event::has_launch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_launch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_launch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_launch() {
  if (launch_ != NULL) launch_->Clear();
  clear_has_launch();
}
inline const ::mesos::v1::executor::Event_Launch& Event::launch() const {
  const ::mesos::v1::executor::Event_Launch* p = launch_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.launch)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::executor::Event_Launch*>(
      &::mesos::v1::executor::_Event_Launch_default_instance_);
}
inline ::mesos::v1::executor::Event_Launch* Event::release_launch() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.launch)
  clear_has_launch();
  ::mesos::v1::executor::Event_Launch* temp = launch_;
  launch_ = NULL;
  return temp;
}
inline ::mesos::v1::executor::Event_Launch* Event::mutable_launch() {
  set_has_launch();
  if (launch_ == NULL) {
    launch_ = new ::mesos::v1::executor::Event_Launch;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.launch)
  return launch_;
}
inline void Event::set_allocated_launch(::mesos::v1::executor::Event_Launch* launch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete launch_;
  }
  if (launch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      launch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launch, submessage_arena);
    }
    set_has_launch();
  } else {
    clear_has_launch();
  }
  launch_ = launch;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.launch)
}

// optional .mesos.v1.executor.Event.LaunchGroup launch_group = 8;
inline bool Event::has_launch_group() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Event::set_has_launch_group() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Event::clear_has_launch_group() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Event::clear_launch_group() {
  if (launch_group_ != NULL) launch_group_->Clear();
  clear_has_launch_group();
}
inline const ::mesos::v1::executor::Event_LaunchGroup& Event::launch_group() const {
  const ::mesos::v1::executor::Event_LaunchGroup* p = launch_group_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.launch_group)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::executor::Event_LaunchGroup*>(
      &::mesos::v1::executor::_Event_LaunchGroup_default_instance_);
}
inline ::mesos::v1::executor::Event_LaunchGroup* Event::release_launch_group() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.launch_group)
  clear_has_launch_group();
  ::mesos::v1::executor::Event_LaunchGroup* temp = launch_group_;
  launch_group_ = NULL;
  return temp;
}
inline ::mesos::v1::executor::Event_LaunchGroup* Event::mutable_launch_group() {
  set_has_launch_group();
  if (launch_group_ == NULL) {
    launch_group_ = new ::mesos::v1::executor::Event_LaunchGroup;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.launch_group)
  return launch_group_;
}
inline void Event::set_allocated_launch_group(::mesos::v1::executor::Event_LaunchGroup* launch_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete launch_group_;
  }
  if (launch_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      launch_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launch_group, submessage_arena);
    }
    set_has_launch_group();
  } else {
    clear_has_launch_group();
  }
  launch_group_ = launch_group;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.launch_group)
}

// optional .mesos.v1.executor.Event.Kill kill = 5;
inline bool Event::has_kill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_kill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_kill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_kill() {
  if (kill_ != NULL) kill_->Clear();
  clear_has_kill();
}
inline const ::mesos::v1::executor::Event_Kill& Event::kill() const {
  const ::mesos::v1::executor::Event_Kill* p = kill_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.kill)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::executor::Event_Kill*>(
      &::mesos::v1::executor::_Event_Kill_default_instance_);
}
inline ::mesos::v1::executor::Event_Kill* Event::release_kill() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.kill)
  clear_has_kill();
  ::mesos::v1::executor::Event_Kill* temp = kill_;
  kill_ = NULL;
  return temp;
}
inline ::mesos::v1::executor::Event_Kill* Event::mutable_kill() {
  set_has_kill();
  if (kill_ == NULL) {
    kill_ = new ::mesos::v1::executor::Event_Kill;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.kill)
  return kill_;
}
inline void Event::set_allocated_kill(::mesos::v1::executor::Event_Kill* kill) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kill_;
  }
  if (kill) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kill = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kill, submessage_arena);
    }
    set_has_kill();
  } else {
    clear_has_kill();
  }
  kill_ = kill;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.kill)
}

// optional .mesos.v1.executor.Event.Message message = 6;
inline bool Event::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_message() {
  if (message_ != NULL) message_->Clear();
  clear_has_message();
}
inline const ::mesos::v1::executor::Event_Message& Event::message() const {
  const ::mesos::v1::executor::Event_Message* p = message_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.message)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::executor::Event_Message*>(
      &::mesos::v1::executor::_Event_Message_default_instance_);
}
inline ::mesos::v1::executor::Event_Message* Event::release_message() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.message)
  clear_has_message();
  ::mesos::v1::executor::Event_Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::mesos::v1::executor::Event_Message* Event::mutable_message() {
  set_has_message();
  if (message_ == NULL) {
    message_ = new ::mesos::v1::executor::Event_Message;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.message)
  return message_;
}
inline void Event::set_allocated_message(::mesos::v1::executor::Event_Message* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    set_has_message();
  } else {
    clear_has_message();
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.message)
}

// optional .mesos.v1.executor.Event.Error error = 7;
inline bool Event::has_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_error() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_error() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
inline const ::mesos::v1::executor::Event_Error& Event::error() const {
  const ::mesos::v1::executor::Event_Error* p = error_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Event.error)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::executor::Event_Error*>(
      &::mesos::v1::executor::_Event_Error_default_instance_);
}
inline ::mesos::v1::executor::Event_Error* Event::release_error() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Event.error)
  clear_has_error();
  ::mesos::v1::executor::Event_Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::mesos::v1::executor::Event_Error* Event::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::mesos::v1::executor::Event_Error;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Event.error)
  return error_;
}
inline void Event::set_allocated_error(::mesos::v1::executor::Event_Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Event.error)
}

// -------------------------------------------------------------------

// Call_Subscribe

// repeated .mesos.v1.TaskInfo unacknowledged_tasks = 1;
inline int Call_Subscribe::unacknowledged_tasks_size() const {
  return unacknowledged_tasks_.size();
}
inline const ::mesos::v1::TaskInfo& Call_Subscribe::unacknowledged_tasks(int index) const {
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Call.Subscribe.unacknowledged_tasks)
  return unacknowledged_tasks_.Get(index);
}
inline ::mesos::v1::TaskInfo* Call_Subscribe::mutable_unacknowledged_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Call.Subscribe.unacknowledged_tasks)
  return unacknowledged_tasks_.Mutable(index);
}
inline ::mesos::v1::TaskInfo* Call_Subscribe::add_unacknowledged_tasks() {
  // @@protoc_insertion_point(field_add:mesos.v1.executor.Call.Subscribe.unacknowledged_tasks)
  return unacknowledged_tasks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::v1::TaskInfo >*
Call_Subscribe::mutable_unacknowledged_tasks() {
  // @@protoc_insertion_point(field_mutable_list:mesos.v1.executor.Call.Subscribe.unacknowledged_tasks)
  return &unacknowledged_tasks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::v1::TaskInfo >&
Call_Subscribe::unacknowledged_tasks() const {
  // @@protoc_insertion_point(field_list:mesos.v1.executor.Call.Subscribe.unacknowledged_tasks)
  return unacknowledged_tasks_;
}

// repeated .mesos.v1.executor.Call.Update unacknowledged_updates = 2;
inline int Call_Subscribe::unacknowledged_updates_size() const {
  return unacknowledged_updates_.size();
}
inline void Call_Subscribe::clear_unacknowledged_updates() {
  unacknowledged_updates_.Clear();
}
inline const ::mesos::v1::executor::Call_Update& Call_Subscribe::unacknowledged_updates(int index) const {
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Call.Subscribe.unacknowledged_updates)
  return unacknowledged_updates_.Get(index);
}
inline ::mesos::v1::executor::Call_Update* Call_Subscribe::mutable_unacknowledged_updates(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Call.Subscribe.unacknowledged_updates)
  return unacknowledged_updates_.Mutable(index);
}
inline ::mesos::v1::executor::Call_Update* Call_Subscribe::add_unacknowledged_updates() {
  // @@protoc_insertion_point(field_add:mesos.v1.executor.Call.Subscribe.unacknowledged_updates)
  return unacknowledged_updates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::v1::executor::Call_Update >*
Call_Subscribe::mutable_unacknowledged_updates() {
  // @@protoc_insertion_point(field_mutable_list:mesos.v1.executor.Call.Subscribe.unacknowledged_updates)
  return &unacknowledged_updates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::v1::executor::Call_Update >&
Call_Subscribe::unacknowledged_updates() const {
  // @@protoc_insertion_point(field_list:mesos.v1.executor.Call.Subscribe.unacknowledged_updates)
  return unacknowledged_updates_;
}

// -------------------------------------------------------------------

// Call_Update

// required .mesos.v1.TaskStatus status = 1;
inline bool Call_Update::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_Update::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_Update::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::v1::TaskStatus& Call_Update::status() const {
  const ::mesos::v1::TaskStatus* p = status_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Call.Update.status)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::TaskStatus*>(
      &::mesos::v1::_TaskStatus_default_instance_);
}
inline ::mesos::v1::TaskStatus* Call_Update::release_status() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Call.Update.status)
  clear_has_status();
  ::mesos::v1::TaskStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::mesos::v1::TaskStatus* Call_Update::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::mesos::v1::TaskStatus;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Call.Update.status)
  return status_;
}
inline void Call_Update::set_allocated_status(::mesos::v1::TaskStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Call.Update.status)
}

// -------------------------------------------------------------------

// Call_Message

// required bytes data = 2;
inline bool Call_Message::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_Message::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_Message::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_Message::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Call_Message::data() const {
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Call.Message.data)
  return data_.GetNoArena();
}
inline void Call_Message::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.v1.executor.Call.Message.data)
}
#if LANG_CXX11
inline void Call_Message::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.v1.executor.Call.Message.data)
}
#endif
inline void Call_Message::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.v1.executor.Call.Message.data)
}
inline void Call_Message::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.v1.executor.Call.Message.data)
}
inline ::std::string* Call_Message::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Call.Message.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call_Message::release_data() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Call.Message.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call_Message::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Call.Message.data)
}

// -------------------------------------------------------------------

// Call

// required .mesos.v1.ExecutorID executor_id = 1;
inline bool Call::has_executor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call::set_has_executor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call::clear_has_executor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::v1::ExecutorID& Call::executor_id() const {
  const ::mesos::v1::ExecutorID* p = executor_id_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Call.executor_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::ExecutorID*>(
      &::mesos::v1::_ExecutorID_default_instance_);
}
inline ::mesos::v1::ExecutorID* Call::release_executor_id() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Call.executor_id)
  clear_has_executor_id();
  ::mesos::v1::ExecutorID* temp = executor_id_;
  executor_id_ = NULL;
  return temp;
}
inline ::mesos::v1::ExecutorID* Call::mutable_executor_id() {
  set_has_executor_id();
  if (executor_id_ == NULL) {
    executor_id_ = new ::mesos::v1::ExecutorID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Call.executor_id)
  return executor_id_;
}
inline void Call::set_allocated_executor_id(::mesos::v1::ExecutorID* executor_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(executor_id_);
  }
  if (executor_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      executor_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, executor_id, submessage_arena);
    }
    set_has_executor_id();
  } else {
    clear_has_executor_id();
  }
  executor_id_ = executor_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Call.executor_id)
}

// required .mesos.v1.FrameworkID framework_id = 2;
inline bool Call::has_framework_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Call::set_has_framework_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Call::clear_has_framework_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mesos::v1::FrameworkID& Call::framework_id() const {
  const ::mesos::v1::FrameworkID* p = framework_id_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Call.framework_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::FrameworkID*>(
      &::mesos::v1::_FrameworkID_default_instance_);
}
inline ::mesos::v1::FrameworkID* Call::release_framework_id() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Call.framework_id)
  clear_has_framework_id();
  ::mesos::v1::FrameworkID* temp = framework_id_;
  framework_id_ = NULL;
  return temp;
}
inline ::mesos::v1::FrameworkID* Call::mutable_framework_id() {
  set_has_framework_id();
  if (framework_id_ == NULL) {
    framework_id_ = new ::mesos::v1::FrameworkID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Call.framework_id)
  return framework_id_;
}
inline void Call::set_allocated_framework_id(::mesos::v1::FrameworkID* framework_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(framework_id_);
  }
  if (framework_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      framework_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, framework_id, submessage_arena);
    }
    set_has_framework_id();
  } else {
    clear_has_framework_id();
  }
  framework_id_ = framework_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Call.framework_id)
}

// optional .mesos.v1.executor.Call.Type type = 3;
inline bool Call::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Call::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Call::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Call::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::mesos::v1::executor::Call_Type Call::type() const {
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Call.type)
  return static_cast< ::mesos::v1::executor::Call_Type >(type_);
}
inline void Call::set_type(::mesos::v1::executor::Call_Type value) {
  assert(::mesos::v1::executor::Call_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mesos.v1.executor.Call.type)
}

// optional .mesos.v1.executor.Call.Subscribe subscribe = 4;
inline bool Call::has_subscribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Call::set_has_subscribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Call::clear_has_subscribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Call::clear_subscribe() {
  if (subscribe_ != NULL) subscribe_->Clear();
  clear_has_subscribe();
}
inline const ::mesos::v1::executor::Call_Subscribe& Call::subscribe() const {
  const ::mesos::v1::executor::Call_Subscribe* p = subscribe_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Call.subscribe)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::executor::Call_Subscribe*>(
      &::mesos::v1::executor::_Call_Subscribe_default_instance_);
}
inline ::mesos::v1::executor::Call_Subscribe* Call::release_subscribe() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Call.subscribe)
  clear_has_subscribe();
  ::mesos::v1::executor::Call_Subscribe* temp = subscribe_;
  subscribe_ = NULL;
  return temp;
}
inline ::mesos::v1::executor::Call_Subscribe* Call::mutable_subscribe() {
  set_has_subscribe();
  if (subscribe_ == NULL) {
    subscribe_ = new ::mesos::v1::executor::Call_Subscribe;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Call.subscribe)
  return subscribe_;
}
inline void Call::set_allocated_subscribe(::mesos::v1::executor::Call_Subscribe* subscribe) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete subscribe_;
  }
  if (subscribe) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subscribe = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subscribe, submessage_arena);
    }
    set_has_subscribe();
  } else {
    clear_has_subscribe();
  }
  subscribe_ = subscribe;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Call.subscribe)
}

// optional .mesos.v1.executor.Call.Update update = 5;
inline bool Call::has_update() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Call::set_has_update() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Call::clear_has_update() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Call::clear_update() {
  if (update_ != NULL) update_->Clear();
  clear_has_update();
}
inline const ::mesos::v1::executor::Call_Update& Call::update() const {
  const ::mesos::v1::executor::Call_Update* p = update_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Call.update)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::executor::Call_Update*>(
      &::mesos::v1::executor::_Call_Update_default_instance_);
}
inline ::mesos::v1::executor::Call_Update* Call::release_update() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Call.update)
  clear_has_update();
  ::mesos::v1::executor::Call_Update* temp = update_;
  update_ = NULL;
  return temp;
}
inline ::mesos::v1::executor::Call_Update* Call::mutable_update() {
  set_has_update();
  if (update_ == NULL) {
    update_ = new ::mesos::v1::executor::Call_Update;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Call.update)
  return update_;
}
inline void Call::set_allocated_update(::mesos::v1::executor::Call_Update* update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_;
  }
  if (update) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
  } else {
    clear_has_update();
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Call.update)
}

// optional .mesos.v1.executor.Call.Message message = 6;
inline bool Call::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Call::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Call::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Call::clear_message() {
  if (message_ != NULL) message_->Clear();
  clear_has_message();
}
inline const ::mesos::v1::executor::Call_Message& Call::message() const {
  const ::mesos::v1::executor::Call_Message* p = message_;
  // @@protoc_insertion_point(field_get:mesos.v1.executor.Call.message)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::v1::executor::Call_Message*>(
      &::mesos::v1::executor::_Call_Message_default_instance_);
}
inline ::mesos::v1::executor::Call_Message* Call::release_message() {
  // @@protoc_insertion_point(field_release:mesos.v1.executor.Call.message)
  clear_has_message();
  ::mesos::v1::executor::Call_Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::mesos::v1::executor::Call_Message* Call::mutable_message() {
  set_has_message();
  if (message_ == NULL) {
    message_ = new ::mesos::v1::executor::Call_Message;
  }
  // @@protoc_insertion_point(field_mutable:mesos.v1.executor.Call.message)
  return message_;
}
inline void Call::set_allocated_message(::mesos::v1::executor::Call_Message* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    set_has_message();
  } else {
    clear_has_message();
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:mesos.v1.executor.Call.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace executor
}  // namespace v1
}  // namespace mesos

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mesos::v1::executor::Event_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::v1::executor::Event_Type>() {
  return ::mesos::v1::executor::Event_Type_descriptor();
}
template <> struct is_proto_enum< ::mesos::v1::executor::Call_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::v1::executor::Call_Type>() {
  return ::mesos::v1::executor::Call_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2fv1_2fexecutor_2fexecutor_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/slave/oversubscription.proto

#ifndef PROTOBUF_mesos_2fslave_2foversubscription_2eproto__INCLUDED
#define PROTOBUF_mesos_2fslave_2foversubscription_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos/mesos.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_mesos_2fslave_2foversubscription_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsQoSCorrection_KillImpl();
void InitDefaultsQoSCorrection_Kill();
void InitDefaultsQoSCorrectionImpl();
void InitDefaultsQoSCorrection();
inline void InitDefaults() {
  InitDefaultsQoSCorrection_Kill();
  InitDefaultsQoSCorrection();
}
}  // namespace protobuf_mesos_2fslave_2foversubscription_2eproto
namespace mesos {
namespace slave {
class QoSCorrection;
class QoSCorrectionDefaultTypeInternal;
extern QoSCorrectionDefaultTypeInternal _QoSCorrection_default_instance_;
class QoSCorrection_Kill;
class QoSCorrection_KillDefaultTypeInternal;
extern QoSCorrection_KillDefaultTypeInternal _QoSCorrection_Kill_default_instance_;
}  // namespace slave
}  // namespace mesos
namespace mesos {
namespace slave {

enum QoSCorrection_Type {
  QoSCorrection_Type_KILL = 1
};
bool QoSCorrection_Type_IsValid(int value);
const QoSCorrection_Type QoSCorrection_Type_Type_MIN = QoSCorrection_Type_KILL;
const QoSCorrection_Type QoSCorrection_Type_Type_MAX = QoSCorrection_Type_KILL;
const int QoSCorrection_Type_Type_ARRAYSIZE = QoSCorrection_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* QoSCorrection_Type_descriptor();
inline const ::std::string& QoSCorrection_Type_Name(QoSCorrection_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    QoSCorrection_Type_descriptor(), value);
}
inline bool QoSCorrection_Type_Parse(
    const ::std::string& name, QoSCorrection_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QoSCorrection_Type>(
    QoSCorrection_Type_descriptor(), name, value);
}
// ===================================================================

class QoSCorrection_Kill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.slave.QoSCorrection.Kill) */ {
 public:
  QoSCorrection_Kill();
  virtual ~QoSCorrection_Kill();

  QoSCorrection_Kill(const QoSCorrection_Kill& from);

  inline QoSCorrection_Kill& operator=(const QoSCorrection_Kill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QoSCorrection_Kill(QoSCorrection_Kill&& from) noexcept
    : QoSCorrection_Kill() {
    *this = ::std::move(from);
  }

  inline QoSCorrection_Kill& operator=(QoSCorrection_Kill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QoSCorrection_Kill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QoSCorrection_Kill* internal_default_instance() {
    return reinterpret_cast<const QoSCorrection_Kill*>(
               &_QoSCorrection_Kill_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(QoSCorrection_Kill* other);
  friend void swap(QoSCorrection_Kill& a, QoSCorrection_Kill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QoSCorrection_Kill* New() const PROTOBUF_FINAL { return New(NULL); }

  QoSCorrection_Kill* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QoSCorrection_Kill& from);
  void MergeFrom(const QoSCorrection_Kill& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QoSCorrection_Kill* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mesos.FrameworkID framework_id = 1;
  bool has_framework_id() const;
  void clear_framework_id();
  static const int kFrameworkIdFieldNumber = 1;
  const ::mesos::FrameworkID& framework_id() const;
  ::mesos::FrameworkID* release_framework_id();
  ::mesos::FrameworkID* mutable_framework_id();
  void set_allocated_framework_id(::mesos::FrameworkID* framework_id);

  // optional .mesos.ExecutorID executor_id = 2;
  bool has_executor_id() const;
  void clear_executor_id();
  static const int kExecutorIdFieldNumber = 2;
  const ::mesos::ExecutorID& executor_id() const;
  ::mesos::ExecutorID* release_executor_id();
  ::mesos::ExecutorID* mutable_executor_id();
  void set_allocated_executor_id(::mesos::ExecutorID* executor_id);

  // optional .mesos.ContainerID container_id = 3;
  bool has_container_id() const;
  void clear_container_id();
  static const int kContainerIdFieldNumber = 3;
  const ::mesos::ContainerID& container_id() const;
  ::mesos::ContainerID* release_container_id();
  ::mesos::ContainerID* mutable_container_id();
  void set_allocated_container_id(::mesos::ContainerID* container_id);

  // @@protoc_insertion_point(class_scope:mesos.slave.QoSCorrection.Kill)
 private:
  void set_has_framework_id();
  void clear_has_framework_id();
  void set_has_executor_id();
  void clear_has_executor_id();
  void set_has_container_id();
  void clear_has_container_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::FrameworkID* framework_id_;
  ::mesos::ExecutorID* executor_id_;
  ::mesos::ContainerID* container_id_;
  friend struct ::protobuf_mesos_2fslave_2foversubscription_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fslave_2foversubscription_2eproto::InitDefaultsQoSCorrection_KillImpl();
};
// -------------------------------------------------------------------

class QoSCorrection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.slave.QoSCorrection) */ {
 public:
  QoSCorrection();
  virtual ~QoSCorrection();

  QoSCorrection(const QoSCorrection& from);

  inline QoSCorrection& operator=(const QoSCorrection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QoSCorrection(QoSCorrection&& from) noexcept
    : QoSCorrection() {
    *this = ::std::move(from);
  }

  inline QoSCorrection& operator=(QoSCorrection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QoSCorrection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QoSCorrection* internal_default_instance() {
    return reinterpret_cast<const QoSCorrection*>(
               &_QoSCorrection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(QoSCorrection* other);
  friend void swap(QoSCorrection& a, QoSCorrection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QoSCorrection* New() const PROTOBUF_FINAL { return New(NULL); }

  QoSCorrection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QoSCorrection& from);
  void MergeFrom(const QoSCorrection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QoSCorrection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef QoSCorrection_Kill Kill;

  typedef QoSCorrection_Type Type;
  static const Type KILL =
    QoSCorrection_Type_KILL;
  static inline bool Type_IsValid(int value) {
    return QoSCorrection_Type_IsValid(value);
  }
  static const Type Type_MIN =
    QoSCorrection_Type_Type_MIN;
  static const Type Type_MAX =
    QoSCorrection_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    QoSCorrection_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return QoSCorrection_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return QoSCorrection_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return QoSCorrection_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .mesos.slave.QoSCorrection.Kill kill = 2;
  bool has_kill() const;
  void clear_kill();
  static const int kKillFieldNumber = 2;
  const ::mesos::slave::QoSCorrection_Kill& kill() const;
  ::mesos::slave::QoSCorrection_Kill* release_kill();
  ::mesos::slave::QoSCorrection_Kill* mutable_kill();
  void set_allocated_kill(::mesos::slave::QoSCorrection_Kill* kill);

  // required .mesos.slave.QoSCorrection.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::mesos::slave::QoSCorrection_Type type() const;
  void set_type(::mesos::slave::QoSCorrection_Type value);

  // @@protoc_insertion_point(class_scope:mesos.slave.QoSCorrection)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_kill();
  void clear_has_kill();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::slave::QoSCorrection_Kill* kill_;
  int type_;
  friend struct ::protobuf_mesos_2fslave_2foversubscription_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fslave_2foversubscription_2eproto::InitDefaultsQoSCorrectionImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QoSCorrection_Kill

// optional .mesos.FrameworkID framework_id = 1;
inline bool QoSCorrection_Kill::has_framework_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QoSCorrection_Kill::set_has_framework_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QoSCorrection_Kill::clear_has_framework_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::FrameworkID& QoSCorrection_Kill::framework_id() const {
  const ::mesos::FrameworkID* p = framework_id_;
  // @@protoc_insertion_point(field_get:mesos.slave.QoSCorrection.Kill.framework_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::FrameworkID*>(
      &::mesos::_FrameworkID_default_instance_);
}
inline ::mesos::FrameworkID* QoSCorrection_Kill::release_framework_id() {
  // @@protoc_insertion_point(field_release:mesos.slave.QoSCorrection.Kill.framework_id)
  clear_has_framework_id();
  ::mesos::FrameworkID* temp = framework_id_;
  framework_id_ = NULL;
  return temp;
}
inline ::mesos::FrameworkID* QoSCorrection_Kill::mutable_framework_id() {
  set_has_framework_id();
  if (framework_id_ == NULL) {
    framework_id_ = new ::mesos::FrameworkID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.slave.QoSCorrection.Kill.framework_id)
  return framework_id_;
}
inline void QoSCorrection_Kill::set_allocated_framework_id(::mesos::FrameworkID* framework_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(framework_id_);
  }
  if (framework_id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(framework_id)->GetArena();
    if (message_arena != submessage_arena) {
      framework_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, framework_id, submessage_arena);
    }
    set_has_framework_id();
  } else {
    clear_has_framework_id();
  }
  framework_id_ = framework_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.slave.QoSCorrection.Kill.framework_id)
}

// optional .mesos.ExecutorID executor_id = 2;
inline bool QoSCorrection_Kill::has_executor_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QoSCorrection_Kill::set_has_executor_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QoSCorrection_Kill::clear_has_executor_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mesos::ExecutorID& QoSCorrection_Kill::executor_id() const {
  const ::mesos::ExecutorID* p = executor_id_;
  // @@protoc_insertion_point(field_get:mesos.slave.QoSCorrection.Kill.executor_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::ExecutorID*>(
      &::mesos::_ExecutorID_default_instance_);
}
inline ::mesos::ExecutorID* QoSCorrection_Kill::release_executor_id() {
  // @@protoc_insertion_point(field_release:mesos.slave.QoSCorrection.Kill.executor_id)
  clear_has_executor_id();
  ::mesos::ExecutorID* temp = executor_id_;
  executor_id_ = NULL;
  return temp;
}
inline ::mesos::ExecutorID* QoSCorrection_Kill::mutable_executor_id() {
  set_has_executor_id();
  if (executor_id_ == NULL) {
    executor_id_ = new ::mesos::ExecutorID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.slave.QoSCorrection.Kill.executor_id)
  return executor_id_;
}
inline void QoSCorrection_Kill::set_allocated_executor_id(::mesos::ExecutorID* executor_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(executor_id_);
  }
  if (executor_id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(executor_id)->GetArena();
    if (message_arena != submessage_arena) {
      executor_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, executor_id, submessage_arena);
    }
    set_has_executor_id();
  } else {
    clear_has_executor_id();
  }
  executor_id_ = executor_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.slave.QoSCorrection.Kill.executor_id)
}

// optional .mesos.ContainerID container_id = 3;
inline bool QoSCorrection_Kill::has_container_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QoSCorrection_Kill::set_has_container_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QoSCorrection_Kill::clear_has_container_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mesos::ContainerID& QoSCorrection_Kill::container_id() const {
  const ::mesos::ContainerID* p = container_id_;
  // @@protoc_insertion_point(field_get:mesos.slave.QoSCorrection.Kill.container_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::ContainerID*>(
      &::mesos::_ContainerID_default_instance_);
}
inline ::mesos::ContainerID* QoSCorrection_Kill::release_container_id() {
  // @@protoc_insertion_point(field_release:mesos.slave.QoSCorrection.Kill.container_id)
  clear_has_container_id();
  ::mesos::ContainerID* temp = container_id_;
  container_id_ = NULL;
  return temp;
}
inline ::mesos::ContainerID* QoSCorrection_Kill::mutable_container_id() {
  set_has_container_id();
  if (container_id_ == NULL) {
    container_id_ = new ::mesos::ContainerID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.slave.QoSCorrection.Kill.container_id)
  return container_id_;
}
inline void QoSCorrection_Kill::set_allocated_container_id(::mesos::ContainerID* container_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(container_id_);
  }
  if (container_id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(container_id)->GetArena();
    if (message_arena != submessage_arena) {
      container_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, container_id, submessage_arena);
    }
    set_has_container_id();
  } else {
    clear_has_container_id();
  }
  container_id_ = container_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.slave.QoSCorrection.Kill.container_id)
}

// -------------------------------------------------------------------

// QoSCorrection

// required .mesos.slave.QoSCorrection.Type type = 1;
inline bool QoSCorrection::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QoSCorrection::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QoSCorrection::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QoSCorrection::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mesos::slave::QoSCorrection_Type QoSCorrection::type() const {
  // @@protoc_insertion_point(field_get:mesos.slave.QoSCorrection.type)
  return static_cast< ::mesos::slave::QoSCorrection_Type >(type_);
}
inline void QoSCorrection::set_type(::mesos::slave::QoSCorrection_Type value) {
  assert(::mesos::slave::QoSCorrection_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mesos.slave.QoSCorrection.type)
}

// optional .mesos.slave.QoSCorrection.Kill kill = 2;
inline bool QoSCorrection::has_kill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QoSCorrection::set_has_kill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QoSCorrection::clear_has_kill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QoSCorrection::clear_kill() {
  if (kill_ != NULL) kill_->Clear();
  clear_has_kill();
}
inline const ::mesos::slave::QoSCorrection_Kill& QoSCorrection::kill() const {
  const ::mesos::slave::QoSCorrection_Kill* p = kill_;
  // @@protoc_insertion_point(field_get:mesos.slave.QoSCorrection.kill)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::slave::QoSCorrection_Kill*>(
      &::mesos::slave::_QoSCorrection_Kill_default_instance_);
}
inline ::mesos::slave::QoSCorrection_Kill* QoSCorrection::release_kill() {
  // @@protoc_insertion_point(field_release:mesos.slave.QoSCorrection.kill)
  clear_has_kill();
  ::mesos::slave::QoSCorrection_Kill* temp = kill_;
  kill_ = NULL;
  return temp;
}
inline ::mesos::slave::QoSCorrection_Kill* QoSCorrection::mutable_kill() {
  set_has_kill();
  if (kill_ == NULL) {
    kill_ = new ::mesos::slave::QoSCorrection_Kill;
  }
  // @@protoc_insertion_point(field_mutable:mesos.slave.QoSCorrection.kill)
  return kill_;
}
inline void QoSCorrection::set_allocated_kill(::mesos::slave::QoSCorrection_Kill* kill) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kill_;
  }
  if (kill) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kill = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kill, submessage_arena);
    }
    set_has_kill();
  } else {
    clear_has_kill();
  }
  kill_ = kill;
  // @@protoc_insertion_point(field_set_allocated:mesos.slave.QoSCorrection.kill)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace slave
}  // namespace mesos

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mesos::slave::QoSCorrection_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::slave::QoSCorrection_Type>() {
  return ::mesos::slave::QoSCorrection_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2fslave_2foversubscription_2eproto__INCLUDED

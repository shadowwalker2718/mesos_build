// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/resource_provider/resource_provider.proto

#ifndef PROTOBUF_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto__INCLUDED
#define PROTOBUF_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos/mesos.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEvent_SubscribedImpl();
void InitDefaultsEvent_Subscribed();
void InitDefaultsEvent_ApplyOperationImpl();
void InitDefaultsEvent_ApplyOperation();
void InitDefaultsEvent_PublishResourcesImpl();
void InitDefaultsEvent_PublishResources();
void InitDefaultsEvent_AcknowledgeOperationStatusImpl();
void InitDefaultsEvent_AcknowledgeOperationStatus();
void InitDefaultsEvent_ReconcileOperationsImpl();
void InitDefaultsEvent_ReconcileOperations();
void InitDefaultsEventImpl();
void InitDefaultsEvent();
void InitDefaultsCall_SubscribeImpl();
void InitDefaultsCall_Subscribe();
void InitDefaultsCall_UpdateOperationStatusImpl();
void InitDefaultsCall_UpdateOperationStatus();
void InitDefaultsCall_UpdateStateImpl();
void InitDefaultsCall_UpdateState();
void InitDefaultsCall_UpdatePublishResourcesStatusImpl();
void InitDefaultsCall_UpdatePublishResourcesStatus();
void InitDefaultsCallImpl();
void InitDefaultsCall();
inline void InitDefaults() {
  InitDefaultsEvent_Subscribed();
  InitDefaultsEvent_ApplyOperation();
  InitDefaultsEvent_PublishResources();
  InitDefaultsEvent_AcknowledgeOperationStatus();
  InitDefaultsEvent_ReconcileOperations();
  InitDefaultsEvent();
  InitDefaultsCall_Subscribe();
  InitDefaultsCall_UpdateOperationStatus();
  InitDefaultsCall_UpdateState();
  InitDefaultsCall_UpdatePublishResourcesStatus();
  InitDefaultsCall();
}
}  // namespace protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto
namespace mesos {
namespace resource_provider {
class Call;
class CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class Call_Subscribe;
class Call_SubscribeDefaultTypeInternal;
extern Call_SubscribeDefaultTypeInternal _Call_Subscribe_default_instance_;
class Call_UpdateOperationStatus;
class Call_UpdateOperationStatusDefaultTypeInternal;
extern Call_UpdateOperationStatusDefaultTypeInternal _Call_UpdateOperationStatus_default_instance_;
class Call_UpdatePublishResourcesStatus;
class Call_UpdatePublishResourcesStatusDefaultTypeInternal;
extern Call_UpdatePublishResourcesStatusDefaultTypeInternal _Call_UpdatePublishResourcesStatus_default_instance_;
class Call_UpdateState;
class Call_UpdateStateDefaultTypeInternal;
extern Call_UpdateStateDefaultTypeInternal _Call_UpdateState_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_AcknowledgeOperationStatus;
class Event_AcknowledgeOperationStatusDefaultTypeInternal;
extern Event_AcknowledgeOperationStatusDefaultTypeInternal _Event_AcknowledgeOperationStatus_default_instance_;
class Event_ApplyOperation;
class Event_ApplyOperationDefaultTypeInternal;
extern Event_ApplyOperationDefaultTypeInternal _Event_ApplyOperation_default_instance_;
class Event_PublishResources;
class Event_PublishResourcesDefaultTypeInternal;
extern Event_PublishResourcesDefaultTypeInternal _Event_PublishResources_default_instance_;
class Event_ReconcileOperations;
class Event_ReconcileOperationsDefaultTypeInternal;
extern Event_ReconcileOperationsDefaultTypeInternal _Event_ReconcileOperations_default_instance_;
class Event_Subscribed;
class Event_SubscribedDefaultTypeInternal;
extern Event_SubscribedDefaultTypeInternal _Event_Subscribed_default_instance_;
}  // namespace resource_provider
}  // namespace mesos
namespace mesos {
namespace resource_provider {

enum Event_Type {
  Event_Type_UNKNOWN = 0,
  Event_Type_SUBSCRIBED = 1,
  Event_Type_APPLY_OPERATION = 2,
  Event_Type_PUBLISH_RESOURCES = 3,
  Event_Type_ACKNOWLEDGE_OPERATION_STATUS = 4,
  Event_Type_RECONCILE_OPERATIONS = 5
};
bool Event_Type_IsValid(int value);
const Event_Type Event_Type_Type_MIN = Event_Type_UNKNOWN;
const Event_Type Event_Type_Type_MAX = Event_Type_RECONCILE_OPERATIONS;
const int Event_Type_Type_ARRAYSIZE = Event_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_Type_descriptor();
inline const ::std::string& Event_Type_Name(Event_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_Type_descriptor(), value);
}
inline bool Event_Type_Parse(
    const ::std::string& name, Event_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_Type>(
    Event_Type_descriptor(), name, value);
}
enum Call_UpdatePublishResourcesStatus_Status {
  Call_UpdatePublishResourcesStatus_Status_UNKNOWN = 0,
  Call_UpdatePublishResourcesStatus_Status_OK = 1,
  Call_UpdatePublishResourcesStatus_Status_FAILED = 2
};
bool Call_UpdatePublishResourcesStatus_Status_IsValid(int value);
const Call_UpdatePublishResourcesStatus_Status Call_UpdatePublishResourcesStatus_Status_Status_MIN = Call_UpdatePublishResourcesStatus_Status_UNKNOWN;
const Call_UpdatePublishResourcesStatus_Status Call_UpdatePublishResourcesStatus_Status_Status_MAX = Call_UpdatePublishResourcesStatus_Status_FAILED;
const int Call_UpdatePublishResourcesStatus_Status_Status_ARRAYSIZE = Call_UpdatePublishResourcesStatus_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Call_UpdatePublishResourcesStatus_Status_descriptor();
inline const ::std::string& Call_UpdatePublishResourcesStatus_Status_Name(Call_UpdatePublishResourcesStatus_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Call_UpdatePublishResourcesStatus_Status_descriptor(), value);
}
inline bool Call_UpdatePublishResourcesStatus_Status_Parse(
    const ::std::string& name, Call_UpdatePublishResourcesStatus_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Call_UpdatePublishResourcesStatus_Status>(
    Call_UpdatePublishResourcesStatus_Status_descriptor(), name, value);
}
enum Call_Type {
  Call_Type_UNKNOWN = 0,
  Call_Type_SUBSCRIBE = 1,
  Call_Type_UPDATE_OPERATION_STATUS = 2,
  Call_Type_UPDATE_STATE = 3,
  Call_Type_UPDATE_PUBLISH_RESOURCES_STATUS = 4
};
bool Call_Type_IsValid(int value);
const Call_Type Call_Type_Type_MIN = Call_Type_UNKNOWN;
const Call_Type Call_Type_Type_MAX = Call_Type_UPDATE_PUBLISH_RESOURCES_STATUS;
const int Call_Type_Type_ARRAYSIZE = Call_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Call_Type_descriptor();
inline const ::std::string& Call_Type_Name(Call_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Call_Type_descriptor(), value);
}
inline bool Call_Type_Parse(
    const ::std::string& name, Call_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Call_Type>(
    Call_Type_descriptor(), name, value);
}
// ===================================================================

class Event_Subscribed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.resource_provider.Event.Subscribed) */ {
 public:
  Event_Subscribed();
  virtual ~Event_Subscribed();

  Event_Subscribed(const Event_Subscribed& from);

  inline Event_Subscribed& operator=(const Event_Subscribed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_Subscribed(Event_Subscribed&& from) noexcept
    : Event_Subscribed() {
    *this = ::std::move(from);
  }

  inline Event_Subscribed& operator=(Event_Subscribed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Subscribed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Subscribed* internal_default_instance() {
    return reinterpret_cast<const Event_Subscribed*>(
               &_Event_Subscribed_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Event_Subscribed* other);
  friend void swap(Event_Subscribed& a, Event_Subscribed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_Subscribed* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_Subscribed* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_Subscribed& from);
  void MergeFrom(const Event_Subscribed& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_Subscribed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.ResourceProviderID provider_id = 1;
  bool has_provider_id() const;
  void clear_provider_id();
  static const int kProviderIdFieldNumber = 1;
  const ::mesos::ResourceProviderID& provider_id() const;
  ::mesos::ResourceProviderID* release_provider_id();
  ::mesos::ResourceProviderID* mutable_provider_id();
  void set_allocated_provider_id(::mesos::ResourceProviderID* provider_id);

  // @@protoc_insertion_point(class_scope:mesos.resource_provider.Event.Subscribed)
 private:
  void set_has_provider_id();
  void clear_has_provider_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::ResourceProviderID* provider_id_;
  friend struct ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::InitDefaultsEvent_SubscribedImpl();
};
// -------------------------------------------------------------------

class Event_ApplyOperation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.resource_provider.Event.ApplyOperation) */ {
 public:
  Event_ApplyOperation();
  virtual ~Event_ApplyOperation();

  Event_ApplyOperation(const Event_ApplyOperation& from);

  inline Event_ApplyOperation& operator=(const Event_ApplyOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_ApplyOperation(Event_ApplyOperation&& from) noexcept
    : Event_ApplyOperation() {
    *this = ::std::move(from);
  }

  inline Event_ApplyOperation& operator=(Event_ApplyOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_ApplyOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_ApplyOperation* internal_default_instance() {
    return reinterpret_cast<const Event_ApplyOperation*>(
               &_Event_ApplyOperation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Event_ApplyOperation* other);
  friend void swap(Event_ApplyOperation& a, Event_ApplyOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_ApplyOperation* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_ApplyOperation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_ApplyOperation& from);
  void MergeFrom(const Event_ApplyOperation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_ApplyOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mesos.FrameworkID framework_id = 1;
  bool has_framework_id() const;
  void clear_framework_id();
  static const int kFrameworkIdFieldNumber = 1;
  const ::mesos::FrameworkID& framework_id() const;
  ::mesos::FrameworkID* release_framework_id();
  ::mesos::FrameworkID* mutable_framework_id();
  void set_allocated_framework_id(::mesos::FrameworkID* framework_id);

  // required .mesos.Offer.Operation info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::mesos::Offer_Operation& info() const;
  ::mesos::Offer_Operation* release_info();
  ::mesos::Offer_Operation* mutable_info();
  void set_allocated_info(::mesos::Offer_Operation* info);

  // required .mesos.UUID operation_uuid = 3;
  bool has_operation_uuid() const;
  void clear_operation_uuid();
  static const int kOperationUuidFieldNumber = 3;
  const ::mesos::UUID& operation_uuid() const;
  ::mesos::UUID* release_operation_uuid();
  ::mesos::UUID* mutable_operation_uuid();
  void set_allocated_operation_uuid(::mesos::UUID* operation_uuid);

  // required .mesos.UUID resource_version_uuid = 4;
  bool has_resource_version_uuid() const;
  void clear_resource_version_uuid();
  static const int kResourceVersionUuidFieldNumber = 4;
  const ::mesos::UUID& resource_version_uuid() const;
  ::mesos::UUID* release_resource_version_uuid();
  ::mesos::UUID* mutable_resource_version_uuid();
  void set_allocated_resource_version_uuid(::mesos::UUID* resource_version_uuid);

  // @@protoc_insertion_point(class_scope:mesos.resource_provider.Event.ApplyOperation)
 private:
  void set_has_framework_id();
  void clear_has_framework_id();
  void set_has_info();
  void clear_has_info();
  void set_has_operation_uuid();
  void clear_has_operation_uuid();
  void set_has_resource_version_uuid();
  void clear_has_resource_version_uuid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::FrameworkID* framework_id_;
  ::mesos::Offer_Operation* info_;
  ::mesos::UUID* operation_uuid_;
  ::mesos::UUID* resource_version_uuid_;
  friend struct ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::InitDefaultsEvent_ApplyOperationImpl();
};
// -------------------------------------------------------------------

class Event_PublishResources : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.resource_provider.Event.PublishResources) */ {
 public:
  Event_PublishResources();
  virtual ~Event_PublishResources();

  Event_PublishResources(const Event_PublishResources& from);

  inline Event_PublishResources& operator=(const Event_PublishResources& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_PublishResources(Event_PublishResources&& from) noexcept
    : Event_PublishResources() {
    *this = ::std::move(from);
  }

  inline Event_PublishResources& operator=(Event_PublishResources&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_PublishResources& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_PublishResources* internal_default_instance() {
    return reinterpret_cast<const Event_PublishResources*>(
               &_Event_PublishResources_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Event_PublishResources* other);
  friend void swap(Event_PublishResources& a, Event_PublishResources& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_PublishResources* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_PublishResources* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_PublishResources& from);
  void MergeFrom(const Event_PublishResources& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_PublishResources* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.Resource resources = 2;
  int resources_size() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 2;
  const ::mesos::Resource& resources(int index) const;
  ::mesos::Resource* mutable_resources(int index);
  ::mesos::Resource* add_resources();
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_resources();
  const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      resources() const;

  // required .mesos.UUID uuid = 1;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::mesos::UUID& uuid() const;
  ::mesos::UUID* release_uuid();
  ::mesos::UUID* mutable_uuid();
  void set_allocated_uuid(::mesos::UUID* uuid);

  // @@protoc_insertion_point(class_scope:mesos.resource_provider.Event.PublishResources)
 private:
  void set_has_uuid();
  void clear_has_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > resources_;
  ::mesos::UUID* uuid_;
  friend struct ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::InitDefaultsEvent_PublishResourcesImpl();
};
// -------------------------------------------------------------------

class Event_AcknowledgeOperationStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.resource_provider.Event.AcknowledgeOperationStatus) */ {
 public:
  Event_AcknowledgeOperationStatus();
  virtual ~Event_AcknowledgeOperationStatus();

  Event_AcknowledgeOperationStatus(const Event_AcknowledgeOperationStatus& from);

  inline Event_AcknowledgeOperationStatus& operator=(const Event_AcknowledgeOperationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_AcknowledgeOperationStatus(Event_AcknowledgeOperationStatus&& from) noexcept
    : Event_AcknowledgeOperationStatus() {
    *this = ::std::move(from);
  }

  inline Event_AcknowledgeOperationStatus& operator=(Event_AcknowledgeOperationStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_AcknowledgeOperationStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_AcknowledgeOperationStatus* internal_default_instance() {
    return reinterpret_cast<const Event_AcknowledgeOperationStatus*>(
               &_Event_AcknowledgeOperationStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Event_AcknowledgeOperationStatus* other);
  friend void swap(Event_AcknowledgeOperationStatus& a, Event_AcknowledgeOperationStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_AcknowledgeOperationStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_AcknowledgeOperationStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_AcknowledgeOperationStatus& from);
  void MergeFrom(const Event_AcknowledgeOperationStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_AcknowledgeOperationStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.UUID status_uuid = 1;
  bool has_status_uuid() const;
  void clear_status_uuid();
  static const int kStatusUuidFieldNumber = 1;
  const ::mesos::UUID& status_uuid() const;
  ::mesos::UUID* release_status_uuid();
  ::mesos::UUID* mutable_status_uuid();
  void set_allocated_status_uuid(::mesos::UUID* status_uuid);

  // required .mesos.UUID operation_uuid = 2;
  bool has_operation_uuid() const;
  void clear_operation_uuid();
  static const int kOperationUuidFieldNumber = 2;
  const ::mesos::UUID& operation_uuid() const;
  ::mesos::UUID* release_operation_uuid();
  ::mesos::UUID* mutable_operation_uuid();
  void set_allocated_operation_uuid(::mesos::UUID* operation_uuid);

  // @@protoc_insertion_point(class_scope:mesos.resource_provider.Event.AcknowledgeOperationStatus)
 private:
  void set_has_status_uuid();
  void clear_has_status_uuid();
  void set_has_operation_uuid();
  void clear_has_operation_uuid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::UUID* status_uuid_;
  ::mesos::UUID* operation_uuid_;
  friend struct ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::InitDefaultsEvent_AcknowledgeOperationStatusImpl();
};
// -------------------------------------------------------------------

class Event_ReconcileOperations : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.resource_provider.Event.ReconcileOperations) */ {
 public:
  Event_ReconcileOperations();
  virtual ~Event_ReconcileOperations();

  Event_ReconcileOperations(const Event_ReconcileOperations& from);

  inline Event_ReconcileOperations& operator=(const Event_ReconcileOperations& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_ReconcileOperations(Event_ReconcileOperations&& from) noexcept
    : Event_ReconcileOperations() {
    *this = ::std::move(from);
  }

  inline Event_ReconcileOperations& operator=(Event_ReconcileOperations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_ReconcileOperations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_ReconcileOperations* internal_default_instance() {
    return reinterpret_cast<const Event_ReconcileOperations*>(
               &_Event_ReconcileOperations_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Event_ReconcileOperations* other);
  friend void swap(Event_ReconcileOperations& a, Event_ReconcileOperations& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_ReconcileOperations* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_ReconcileOperations* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_ReconcileOperations& from);
  void MergeFrom(const Event_ReconcileOperations& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_ReconcileOperations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.UUID operation_uuids = 1;
  int operation_uuids_size() const;
  void clear_operation_uuids();
  static const int kOperationUuidsFieldNumber = 1;
  const ::mesos::UUID& operation_uuids(int index) const;
  ::mesos::UUID* mutable_operation_uuids(int index);
  ::mesos::UUID* add_operation_uuids();
  ::google::protobuf::RepeatedPtrField< ::mesos::UUID >*
      mutable_operation_uuids();
  const ::google::protobuf::RepeatedPtrField< ::mesos::UUID >&
      operation_uuids() const;

  // @@protoc_insertion_point(class_scope:mesos.resource_provider.Event.ReconcileOperations)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::UUID > operation_uuids_;
  friend struct ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::InitDefaultsEvent_ReconcileOperationsImpl();
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.resource_provider.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Event_Subscribed Subscribed;
  typedef Event_ApplyOperation ApplyOperation;
  typedef Event_PublishResources PublishResources;
  typedef Event_AcknowledgeOperationStatus AcknowledgeOperationStatus;
  typedef Event_ReconcileOperations ReconcileOperations;

  typedef Event_Type Type;
  static const Type UNKNOWN =
    Event_Type_UNKNOWN;
  static const Type SUBSCRIBED =
    Event_Type_SUBSCRIBED;
  static const Type APPLY_OPERATION =
    Event_Type_APPLY_OPERATION;
  static const Type PUBLISH_RESOURCES =
    Event_Type_PUBLISH_RESOURCES;
  static const Type ACKNOWLEDGE_OPERATION_STATUS =
    Event_Type_ACKNOWLEDGE_OPERATION_STATUS;
  static const Type RECONCILE_OPERATIONS =
    Event_Type_RECONCILE_OPERATIONS;
  static inline bool Type_IsValid(int value) {
    return Event_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Event_Type_Type_MIN;
  static const Type Type_MAX =
    Event_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Event_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Event_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Event_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Event_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .mesos.resource_provider.Event.Subscribed subscribed = 2;
  bool has_subscribed() const;
  void clear_subscribed();
  static const int kSubscribedFieldNumber = 2;
  const ::mesos::resource_provider::Event_Subscribed& subscribed() const;
  ::mesos::resource_provider::Event_Subscribed* release_subscribed();
  ::mesos::resource_provider::Event_Subscribed* mutable_subscribed();
  void set_allocated_subscribed(::mesos::resource_provider::Event_Subscribed* subscribed);

  // optional .mesos.resource_provider.Event.ApplyOperation apply_operation = 3;
  bool has_apply_operation() const;
  void clear_apply_operation();
  static const int kApplyOperationFieldNumber = 3;
  const ::mesos::resource_provider::Event_ApplyOperation& apply_operation() const;
  ::mesos::resource_provider::Event_ApplyOperation* release_apply_operation();
  ::mesos::resource_provider::Event_ApplyOperation* mutable_apply_operation();
  void set_allocated_apply_operation(::mesos::resource_provider::Event_ApplyOperation* apply_operation);

  // optional .mesos.resource_provider.Event.PublishResources publish_resources = 4;
  bool has_publish_resources() const;
  void clear_publish_resources();
  static const int kPublishResourcesFieldNumber = 4;
  const ::mesos::resource_provider::Event_PublishResources& publish_resources() const;
  ::mesos::resource_provider::Event_PublishResources* release_publish_resources();
  ::mesos::resource_provider::Event_PublishResources* mutable_publish_resources();
  void set_allocated_publish_resources(::mesos::resource_provider::Event_PublishResources* publish_resources);

  // optional .mesos.resource_provider.Event.AcknowledgeOperationStatus acknowledge_operation_status = 5;
  bool has_acknowledge_operation_status() const;
  void clear_acknowledge_operation_status();
  static const int kAcknowledgeOperationStatusFieldNumber = 5;
  const ::mesos::resource_provider::Event_AcknowledgeOperationStatus& acknowledge_operation_status() const;
  ::mesos::resource_provider::Event_AcknowledgeOperationStatus* release_acknowledge_operation_status();
  ::mesos::resource_provider::Event_AcknowledgeOperationStatus* mutable_acknowledge_operation_status();
  void set_allocated_acknowledge_operation_status(::mesos::resource_provider::Event_AcknowledgeOperationStatus* acknowledge_operation_status);

  // optional .mesos.resource_provider.Event.ReconcileOperations reconcile_operations = 6;
  bool has_reconcile_operations() const;
  void clear_reconcile_operations();
  static const int kReconcileOperationsFieldNumber = 6;
  const ::mesos::resource_provider::Event_ReconcileOperations& reconcile_operations() const;
  ::mesos::resource_provider::Event_ReconcileOperations* release_reconcile_operations();
  ::mesos::resource_provider::Event_ReconcileOperations* mutable_reconcile_operations();
  void set_allocated_reconcile_operations(::mesos::resource_provider::Event_ReconcileOperations* reconcile_operations);

  // optional .mesos.resource_provider.Event.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::mesos::resource_provider::Event_Type type() const;
  void set_type(::mesos::resource_provider::Event_Type value);

  // @@protoc_insertion_point(class_scope:mesos.resource_provider.Event)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_subscribed();
  void clear_has_subscribed();
  void set_has_apply_operation();
  void clear_has_apply_operation();
  void set_has_publish_resources();
  void clear_has_publish_resources();
  void set_has_acknowledge_operation_status();
  void clear_has_acknowledge_operation_status();
  void set_has_reconcile_operations();
  void clear_has_reconcile_operations();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::resource_provider::Event_Subscribed* subscribed_;
  ::mesos::resource_provider::Event_ApplyOperation* apply_operation_;
  ::mesos::resource_provider::Event_PublishResources* publish_resources_;
  ::mesos::resource_provider::Event_AcknowledgeOperationStatus* acknowledge_operation_status_;
  ::mesos::resource_provider::Event_ReconcileOperations* reconcile_operations_;
  int type_;
  friend struct ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::InitDefaultsEventImpl();
};
// -------------------------------------------------------------------

class Call_Subscribe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.resource_provider.Call.Subscribe) */ {
 public:
  Call_Subscribe();
  virtual ~Call_Subscribe();

  Call_Subscribe(const Call_Subscribe& from);

  inline Call_Subscribe& operator=(const Call_Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call_Subscribe(Call_Subscribe&& from) noexcept
    : Call_Subscribe() {
    *this = ::std::move(from);
  }

  inline Call_Subscribe& operator=(Call_Subscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_Subscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call_Subscribe* internal_default_instance() {
    return reinterpret_cast<const Call_Subscribe*>(
               &_Call_Subscribe_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Call_Subscribe* other);
  friend void swap(Call_Subscribe& a, Call_Subscribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call_Subscribe* New() const PROTOBUF_FINAL { return New(NULL); }

  Call_Subscribe* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Call_Subscribe& from);
  void MergeFrom(const Call_Subscribe& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Call_Subscribe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.ResourceProviderInfo resource_provider_info = 1;
  bool has_resource_provider_info() const;
  void clear_resource_provider_info();
  static const int kResourceProviderInfoFieldNumber = 1;
  const ::mesos::ResourceProviderInfo& resource_provider_info() const;
  ::mesos::ResourceProviderInfo* release_resource_provider_info();
  ::mesos::ResourceProviderInfo* mutable_resource_provider_info();
  void set_allocated_resource_provider_info(::mesos::ResourceProviderInfo* resource_provider_info);

  // @@protoc_insertion_point(class_scope:mesos.resource_provider.Call.Subscribe)
 private:
  void set_has_resource_provider_info();
  void clear_has_resource_provider_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::ResourceProviderInfo* resource_provider_info_;
  friend struct ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::InitDefaultsCall_SubscribeImpl();
};
// -------------------------------------------------------------------

class Call_UpdateOperationStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.resource_provider.Call.UpdateOperationStatus) */ {
 public:
  Call_UpdateOperationStatus();
  virtual ~Call_UpdateOperationStatus();

  Call_UpdateOperationStatus(const Call_UpdateOperationStatus& from);

  inline Call_UpdateOperationStatus& operator=(const Call_UpdateOperationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call_UpdateOperationStatus(Call_UpdateOperationStatus&& from) noexcept
    : Call_UpdateOperationStatus() {
    *this = ::std::move(from);
  }

  inline Call_UpdateOperationStatus& operator=(Call_UpdateOperationStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_UpdateOperationStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call_UpdateOperationStatus* internal_default_instance() {
    return reinterpret_cast<const Call_UpdateOperationStatus*>(
               &_Call_UpdateOperationStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Call_UpdateOperationStatus* other);
  friend void swap(Call_UpdateOperationStatus& a, Call_UpdateOperationStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call_UpdateOperationStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  Call_UpdateOperationStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Call_UpdateOperationStatus& from);
  void MergeFrom(const Call_UpdateOperationStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Call_UpdateOperationStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mesos.FrameworkID framework_id = 1;
  bool has_framework_id() const;
  void clear_framework_id();
  static const int kFrameworkIdFieldNumber = 1;
  const ::mesos::FrameworkID& framework_id() const;
  ::mesos::FrameworkID* release_framework_id();
  ::mesos::FrameworkID* mutable_framework_id();
  void set_allocated_framework_id(::mesos::FrameworkID* framework_id);

  // required .mesos.OperationStatus status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::mesos::OperationStatus& status() const;
  ::mesos::OperationStatus* release_status();
  ::mesos::OperationStatus* mutable_status();
  void set_allocated_status(::mesos::OperationStatus* status);

  // optional .mesos.OperationStatus latest_status = 3;
  bool has_latest_status() const;
  void clear_latest_status();
  static const int kLatestStatusFieldNumber = 3;
  const ::mesos::OperationStatus& latest_status() const;
  ::mesos::OperationStatus* release_latest_status();
  ::mesos::OperationStatus* mutable_latest_status();
  void set_allocated_latest_status(::mesos::OperationStatus* latest_status);

  // required .mesos.UUID operation_uuid = 4;
  bool has_operation_uuid() const;
  void clear_operation_uuid();
  static const int kOperationUuidFieldNumber = 4;
  const ::mesos::UUID& operation_uuid() const;
  ::mesos::UUID* release_operation_uuid();
  ::mesos::UUID* mutable_operation_uuid();
  void set_allocated_operation_uuid(::mesos::UUID* operation_uuid);

  // @@protoc_insertion_point(class_scope:mesos.resource_provider.Call.UpdateOperationStatus)
 private:
  void set_has_framework_id();
  void clear_has_framework_id();
  void set_has_status();
  void clear_has_status();
  void set_has_latest_status();
  void clear_has_latest_status();
  void set_has_operation_uuid();
  void clear_has_operation_uuid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::FrameworkID* framework_id_;
  ::mesos::OperationStatus* status_;
  ::mesos::OperationStatus* latest_status_;
  ::mesos::UUID* operation_uuid_;
  friend struct ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::InitDefaultsCall_UpdateOperationStatusImpl();
};
// -------------------------------------------------------------------

class Call_UpdateState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.resource_provider.Call.UpdateState) */ {
 public:
  Call_UpdateState();
  virtual ~Call_UpdateState();

  Call_UpdateState(const Call_UpdateState& from);

  inline Call_UpdateState& operator=(const Call_UpdateState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call_UpdateState(Call_UpdateState&& from) noexcept
    : Call_UpdateState() {
    *this = ::std::move(from);
  }

  inline Call_UpdateState& operator=(Call_UpdateState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_UpdateState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call_UpdateState* internal_default_instance() {
    return reinterpret_cast<const Call_UpdateState*>(
               &_Call_UpdateState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Call_UpdateState* other);
  friend void swap(Call_UpdateState& a, Call_UpdateState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call_UpdateState* New() const PROTOBUF_FINAL { return New(NULL); }

  Call_UpdateState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Call_UpdateState& from);
  void MergeFrom(const Call_UpdateState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Call_UpdateState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.Operation operations = 1;
  int operations_size() const;
  void clear_operations();
  static const int kOperationsFieldNumber = 1;
  const ::mesos::Operation& operations(int index) const;
  ::mesos::Operation* mutable_operations(int index);
  ::mesos::Operation* add_operations();
  ::google::protobuf::RepeatedPtrField< ::mesos::Operation >*
      mutable_operations();
  const ::google::protobuf::RepeatedPtrField< ::mesos::Operation >&
      operations() const;

  // repeated .mesos.Resource resources = 2;
  int resources_size() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 2;
  const ::mesos::Resource& resources(int index) const;
  ::mesos::Resource* mutable_resources(int index);
  ::mesos::Resource* add_resources();
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_resources();
  const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      resources() const;

  // required .mesos.UUID resource_version_uuid = 3;
  bool has_resource_version_uuid() const;
  void clear_resource_version_uuid();
  static const int kResourceVersionUuidFieldNumber = 3;
  const ::mesos::UUID& resource_version_uuid() const;
  ::mesos::UUID* release_resource_version_uuid();
  ::mesos::UUID* mutable_resource_version_uuid();
  void set_allocated_resource_version_uuid(::mesos::UUID* resource_version_uuid);

  // @@protoc_insertion_point(class_scope:mesos.resource_provider.Call.UpdateState)
 private:
  void set_has_resource_version_uuid();
  void clear_has_resource_version_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Operation > operations_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > resources_;
  ::mesos::UUID* resource_version_uuid_;
  friend struct ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::InitDefaultsCall_UpdateStateImpl();
};
// -------------------------------------------------------------------

class Call_UpdatePublishResourcesStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.resource_provider.Call.UpdatePublishResourcesStatus) */ {
 public:
  Call_UpdatePublishResourcesStatus();
  virtual ~Call_UpdatePublishResourcesStatus();

  Call_UpdatePublishResourcesStatus(const Call_UpdatePublishResourcesStatus& from);

  inline Call_UpdatePublishResourcesStatus& operator=(const Call_UpdatePublishResourcesStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call_UpdatePublishResourcesStatus(Call_UpdatePublishResourcesStatus&& from) noexcept
    : Call_UpdatePublishResourcesStatus() {
    *this = ::std::move(from);
  }

  inline Call_UpdatePublishResourcesStatus& operator=(Call_UpdatePublishResourcesStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_UpdatePublishResourcesStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call_UpdatePublishResourcesStatus* internal_default_instance() {
    return reinterpret_cast<const Call_UpdatePublishResourcesStatus*>(
               &_Call_UpdatePublishResourcesStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Call_UpdatePublishResourcesStatus* other);
  friend void swap(Call_UpdatePublishResourcesStatus& a, Call_UpdatePublishResourcesStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call_UpdatePublishResourcesStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  Call_UpdatePublishResourcesStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Call_UpdatePublishResourcesStatus& from);
  void MergeFrom(const Call_UpdatePublishResourcesStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Call_UpdatePublishResourcesStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Call_UpdatePublishResourcesStatus_Status Status;
  static const Status UNKNOWN =
    Call_UpdatePublishResourcesStatus_Status_UNKNOWN;
  static const Status OK =
    Call_UpdatePublishResourcesStatus_Status_OK;
  static const Status FAILED =
    Call_UpdatePublishResourcesStatus_Status_FAILED;
  static inline bool Status_IsValid(int value) {
    return Call_UpdatePublishResourcesStatus_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Call_UpdatePublishResourcesStatus_Status_Status_MIN;
  static const Status Status_MAX =
    Call_UpdatePublishResourcesStatus_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Call_UpdatePublishResourcesStatus_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Call_UpdatePublishResourcesStatus_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Call_UpdatePublishResourcesStatus_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Call_UpdatePublishResourcesStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .mesos.UUID uuid = 1;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::mesos::UUID& uuid() const;
  ::mesos::UUID* release_uuid();
  ::mesos::UUID* mutable_uuid();
  void set_allocated_uuid(::mesos::UUID* uuid);

  // required .mesos.resource_provider.Call.UpdatePublishResourcesStatus.Status status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::mesos::resource_provider::Call_UpdatePublishResourcesStatus_Status status() const;
  void set_status(::mesos::resource_provider::Call_UpdatePublishResourcesStatus_Status value);

  // @@protoc_insertion_point(class_scope:mesos.resource_provider.Call.UpdatePublishResourcesStatus)
 private:
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_status();
  void clear_has_status();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::UUID* uuid_;
  int status_;
  friend struct ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::InitDefaultsCall_UpdatePublishResourcesStatusImpl();
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.resource_provider.Call) */ {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(Call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Call* other);
  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const PROTOBUF_FINAL { return New(NULL); }

  Call* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Call* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Call_Subscribe Subscribe;
  typedef Call_UpdateOperationStatus UpdateOperationStatus;
  typedef Call_UpdateState UpdateState;
  typedef Call_UpdatePublishResourcesStatus UpdatePublishResourcesStatus;

  typedef Call_Type Type;
  static const Type UNKNOWN =
    Call_Type_UNKNOWN;
  static const Type SUBSCRIBE =
    Call_Type_SUBSCRIBE;
  static const Type UPDATE_OPERATION_STATUS =
    Call_Type_UPDATE_OPERATION_STATUS;
  static const Type UPDATE_STATE =
    Call_Type_UPDATE_STATE;
  static const Type UPDATE_PUBLISH_RESOURCES_STATUS =
    Call_Type_UPDATE_PUBLISH_RESOURCES_STATUS;
  static inline bool Type_IsValid(int value) {
    return Call_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Call_Type_Type_MIN;
  static const Type Type_MAX =
    Call_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Call_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Call_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Call_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Call_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .mesos.ResourceProviderID resource_provider_id = 1;
  bool has_resource_provider_id() const;
  void clear_resource_provider_id();
  static const int kResourceProviderIdFieldNumber = 1;
  const ::mesos::ResourceProviderID& resource_provider_id() const;
  ::mesos::ResourceProviderID* release_resource_provider_id();
  ::mesos::ResourceProviderID* mutable_resource_provider_id();
  void set_allocated_resource_provider_id(::mesos::ResourceProviderID* resource_provider_id);

  // optional .mesos.resource_provider.Call.Subscribe subscribe = 3;
  bool has_subscribe() const;
  void clear_subscribe();
  static const int kSubscribeFieldNumber = 3;
  const ::mesos::resource_provider::Call_Subscribe& subscribe() const;
  ::mesos::resource_provider::Call_Subscribe* release_subscribe();
  ::mesos::resource_provider::Call_Subscribe* mutable_subscribe();
  void set_allocated_subscribe(::mesos::resource_provider::Call_Subscribe* subscribe);

  // optional .mesos.resource_provider.Call.UpdateOperationStatus update_operation_status = 4;
  bool has_update_operation_status() const;
  void clear_update_operation_status();
  static const int kUpdateOperationStatusFieldNumber = 4;
  const ::mesos::resource_provider::Call_UpdateOperationStatus& update_operation_status() const;
  ::mesos::resource_provider::Call_UpdateOperationStatus* release_update_operation_status();
  ::mesos::resource_provider::Call_UpdateOperationStatus* mutable_update_operation_status();
  void set_allocated_update_operation_status(::mesos::resource_provider::Call_UpdateOperationStatus* update_operation_status);

  // optional .mesos.resource_provider.Call.UpdateState update_state = 5;
  bool has_update_state() const;
  void clear_update_state();
  static const int kUpdateStateFieldNumber = 5;
  const ::mesos::resource_provider::Call_UpdateState& update_state() const;
  ::mesos::resource_provider::Call_UpdateState* release_update_state();
  ::mesos::resource_provider::Call_UpdateState* mutable_update_state();
  void set_allocated_update_state(::mesos::resource_provider::Call_UpdateState* update_state);

  // optional .mesos.resource_provider.Call.UpdatePublishResourcesStatus update_publish_resources_status = 6;
  bool has_update_publish_resources_status() const;
  void clear_update_publish_resources_status();
  static const int kUpdatePublishResourcesStatusFieldNumber = 6;
  const ::mesos::resource_provider::Call_UpdatePublishResourcesStatus& update_publish_resources_status() const;
  ::mesos::resource_provider::Call_UpdatePublishResourcesStatus* release_update_publish_resources_status();
  ::mesos::resource_provider::Call_UpdatePublishResourcesStatus* mutable_update_publish_resources_status();
  void set_allocated_update_publish_resources_status(::mesos::resource_provider::Call_UpdatePublishResourcesStatus* update_publish_resources_status);

  // optional .mesos.resource_provider.Call.Type type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::mesos::resource_provider::Call_Type type() const;
  void set_type(::mesos::resource_provider::Call_Type value);

  // @@protoc_insertion_point(class_scope:mesos.resource_provider.Call)
 private:
  void set_has_resource_provider_id();
  void clear_has_resource_provider_id();
  void set_has_type();
  void clear_has_type();
  void set_has_subscribe();
  void clear_has_subscribe();
  void set_has_update_operation_status();
  void clear_has_update_operation_status();
  void set_has_update_state();
  void clear_has_update_state();
  void set_has_update_publish_resources_status();
  void clear_has_update_publish_resources_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::ResourceProviderID* resource_provider_id_;
  ::mesos::resource_provider::Call_Subscribe* subscribe_;
  ::mesos::resource_provider::Call_UpdateOperationStatus* update_operation_status_;
  ::mesos::resource_provider::Call_UpdateState* update_state_;
  ::mesos::resource_provider::Call_UpdatePublishResourcesStatus* update_publish_resources_status_;
  int type_;
  friend struct ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto::InitDefaultsCallImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event_Subscribed

// required .mesos.ResourceProviderID provider_id = 1;
inline bool Event_Subscribed::has_provider_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Subscribed::set_has_provider_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Subscribed::clear_has_provider_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::ResourceProviderID& Event_Subscribed::provider_id() const {
  const ::mesos::ResourceProviderID* p = provider_id_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.Subscribed.provider_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::ResourceProviderID*>(
      &::mesos::_ResourceProviderID_default_instance_);
}
inline ::mesos::ResourceProviderID* Event_Subscribed::release_provider_id() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.Subscribed.provider_id)
  clear_has_provider_id();
  ::mesos::ResourceProviderID* temp = provider_id_;
  provider_id_ = NULL;
  return temp;
}
inline ::mesos::ResourceProviderID* Event_Subscribed::mutable_provider_id() {
  set_has_provider_id();
  if (provider_id_ == NULL) {
    provider_id_ = new ::mesos::ResourceProviderID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.Subscribed.provider_id)
  return provider_id_;
}
inline void Event_Subscribed::set_allocated_provider_id(::mesos::ResourceProviderID* provider_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(provider_id_);
  }
  if (provider_id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(provider_id)->GetArena();
    if (message_arena != submessage_arena) {
      provider_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, provider_id, submessage_arena);
    }
    set_has_provider_id();
  } else {
    clear_has_provider_id();
  }
  provider_id_ = provider_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.Subscribed.provider_id)
}

// -------------------------------------------------------------------

// Event_ApplyOperation

// optional .mesos.FrameworkID framework_id = 1;
inline bool Event_ApplyOperation::has_framework_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_ApplyOperation::set_has_framework_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_ApplyOperation::clear_has_framework_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::FrameworkID& Event_ApplyOperation::framework_id() const {
  const ::mesos::FrameworkID* p = framework_id_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.ApplyOperation.framework_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::FrameworkID*>(
      &::mesos::_FrameworkID_default_instance_);
}
inline ::mesos::FrameworkID* Event_ApplyOperation::release_framework_id() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.ApplyOperation.framework_id)
  clear_has_framework_id();
  ::mesos::FrameworkID* temp = framework_id_;
  framework_id_ = NULL;
  return temp;
}
inline ::mesos::FrameworkID* Event_ApplyOperation::mutable_framework_id() {
  set_has_framework_id();
  if (framework_id_ == NULL) {
    framework_id_ = new ::mesos::FrameworkID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.ApplyOperation.framework_id)
  return framework_id_;
}
inline void Event_ApplyOperation::set_allocated_framework_id(::mesos::FrameworkID* framework_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(framework_id_);
  }
  if (framework_id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(framework_id)->GetArena();
    if (message_arena != submessage_arena) {
      framework_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, framework_id, submessage_arena);
    }
    set_has_framework_id();
  } else {
    clear_has_framework_id();
  }
  framework_id_ = framework_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.ApplyOperation.framework_id)
}

// required .mesos.Offer.Operation info = 2;
inline bool Event_ApplyOperation::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_ApplyOperation::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_ApplyOperation::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mesos::Offer_Operation& Event_ApplyOperation::info() const {
  const ::mesos::Offer_Operation* p = info_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.ApplyOperation.info)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::Offer_Operation*>(
      &::mesos::_Offer_Operation_default_instance_);
}
inline ::mesos::Offer_Operation* Event_ApplyOperation::release_info() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.ApplyOperation.info)
  clear_has_info();
  ::mesos::Offer_Operation* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::mesos::Offer_Operation* Event_ApplyOperation::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::mesos::Offer_Operation;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.ApplyOperation.info)
  return info_;
}
inline void Event_ApplyOperation::set_allocated_info(::mesos::Offer_Operation* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_);
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(info)->GetArena();
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
  } else {
    clear_has_info();
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.ApplyOperation.info)
}

// required .mesos.UUID operation_uuid = 3;
inline bool Event_ApplyOperation::has_operation_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_ApplyOperation::set_has_operation_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_ApplyOperation::clear_has_operation_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mesos::UUID& Event_ApplyOperation::operation_uuid() const {
  const ::mesos::UUID* p = operation_uuid_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.ApplyOperation.operation_uuid)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::UUID*>(
      &::mesos::_UUID_default_instance_);
}
inline ::mesos::UUID* Event_ApplyOperation::release_operation_uuid() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.ApplyOperation.operation_uuid)
  clear_has_operation_uuid();
  ::mesos::UUID* temp = operation_uuid_;
  operation_uuid_ = NULL;
  return temp;
}
inline ::mesos::UUID* Event_ApplyOperation::mutable_operation_uuid() {
  set_has_operation_uuid();
  if (operation_uuid_ == NULL) {
    operation_uuid_ = new ::mesos::UUID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.ApplyOperation.operation_uuid)
  return operation_uuid_;
}
inline void Event_ApplyOperation::set_allocated_operation_uuid(::mesos::UUID* operation_uuid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(operation_uuid_);
  }
  if (operation_uuid) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(operation_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      operation_uuid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operation_uuid, submessage_arena);
    }
    set_has_operation_uuid();
  } else {
    clear_has_operation_uuid();
  }
  operation_uuid_ = operation_uuid;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.ApplyOperation.operation_uuid)
}

// required .mesos.UUID resource_version_uuid = 4;
inline bool Event_ApplyOperation::has_resource_version_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_ApplyOperation::set_has_resource_version_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_ApplyOperation::clear_has_resource_version_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mesos::UUID& Event_ApplyOperation::resource_version_uuid() const {
  const ::mesos::UUID* p = resource_version_uuid_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.ApplyOperation.resource_version_uuid)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::UUID*>(
      &::mesos::_UUID_default_instance_);
}
inline ::mesos::UUID* Event_ApplyOperation::release_resource_version_uuid() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.ApplyOperation.resource_version_uuid)
  clear_has_resource_version_uuid();
  ::mesos::UUID* temp = resource_version_uuid_;
  resource_version_uuid_ = NULL;
  return temp;
}
inline ::mesos::UUID* Event_ApplyOperation::mutable_resource_version_uuid() {
  set_has_resource_version_uuid();
  if (resource_version_uuid_ == NULL) {
    resource_version_uuid_ = new ::mesos::UUID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.ApplyOperation.resource_version_uuid)
  return resource_version_uuid_;
}
inline void Event_ApplyOperation::set_allocated_resource_version_uuid(::mesos::UUID* resource_version_uuid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resource_version_uuid_);
  }
  if (resource_version_uuid) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(resource_version_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      resource_version_uuid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource_version_uuid, submessage_arena);
    }
    set_has_resource_version_uuid();
  } else {
    clear_has_resource_version_uuid();
  }
  resource_version_uuid_ = resource_version_uuid;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.ApplyOperation.resource_version_uuid)
}

// -------------------------------------------------------------------

// Event_PublishResources

// required .mesos.UUID uuid = 1;
inline bool Event_PublishResources::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_PublishResources::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_PublishResources::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::UUID& Event_PublishResources::uuid() const {
  const ::mesos::UUID* p = uuid_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.PublishResources.uuid)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::UUID*>(
      &::mesos::_UUID_default_instance_);
}
inline ::mesos::UUID* Event_PublishResources::release_uuid() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.PublishResources.uuid)
  clear_has_uuid();
  ::mesos::UUID* temp = uuid_;
  uuid_ = NULL;
  return temp;
}
inline ::mesos::UUID* Event_PublishResources::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == NULL) {
    uuid_ = new ::mesos::UUID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.PublishResources.uuid)
  return uuid_;
}
inline void Event_PublishResources::set_allocated_uuid(::mesos::UUID* uuid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(uuid)->GetArena();
    if (message_arena != submessage_arena) {
      uuid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.PublishResources.uuid)
}

// repeated .mesos.Resource resources = 2;
inline int Event_PublishResources::resources_size() const {
  return resources_.size();
}
inline const ::mesos::Resource& Event_PublishResources::resources(int index) const {
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.PublishResources.resources)
  return resources_.Get(index);
}
inline ::mesos::Resource* Event_PublishResources::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.PublishResources.resources)
  return resources_.Mutable(index);
}
inline ::mesos::Resource* Event_PublishResources::add_resources() {
  // @@protoc_insertion_point(field_add:mesos.resource_provider.Event.PublishResources.resources)
  return resources_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
Event_PublishResources::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:mesos.resource_provider.Event.PublishResources.resources)
  return &resources_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
Event_PublishResources::resources() const {
  // @@protoc_insertion_point(field_list:mesos.resource_provider.Event.PublishResources.resources)
  return resources_;
}

// -------------------------------------------------------------------

// Event_AcknowledgeOperationStatus

// required .mesos.UUID status_uuid = 1;
inline bool Event_AcknowledgeOperationStatus::has_status_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_AcknowledgeOperationStatus::set_has_status_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_AcknowledgeOperationStatus::clear_has_status_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::UUID& Event_AcknowledgeOperationStatus::status_uuid() const {
  const ::mesos::UUID* p = status_uuid_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.AcknowledgeOperationStatus.status_uuid)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::UUID*>(
      &::mesos::_UUID_default_instance_);
}
inline ::mesos::UUID* Event_AcknowledgeOperationStatus::release_status_uuid() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.AcknowledgeOperationStatus.status_uuid)
  clear_has_status_uuid();
  ::mesos::UUID* temp = status_uuid_;
  status_uuid_ = NULL;
  return temp;
}
inline ::mesos::UUID* Event_AcknowledgeOperationStatus::mutable_status_uuid() {
  set_has_status_uuid();
  if (status_uuid_ == NULL) {
    status_uuid_ = new ::mesos::UUID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.AcknowledgeOperationStatus.status_uuid)
  return status_uuid_;
}
inline void Event_AcknowledgeOperationStatus::set_allocated_status_uuid(::mesos::UUID* status_uuid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_uuid_);
  }
  if (status_uuid) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(status_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      status_uuid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status_uuid, submessage_arena);
    }
    set_has_status_uuid();
  } else {
    clear_has_status_uuid();
  }
  status_uuid_ = status_uuid;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.AcknowledgeOperationStatus.status_uuid)
}

// required .mesos.UUID operation_uuid = 2;
inline bool Event_AcknowledgeOperationStatus::has_operation_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_AcknowledgeOperationStatus::set_has_operation_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_AcknowledgeOperationStatus::clear_has_operation_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mesos::UUID& Event_AcknowledgeOperationStatus::operation_uuid() const {
  const ::mesos::UUID* p = operation_uuid_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.AcknowledgeOperationStatus.operation_uuid)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::UUID*>(
      &::mesos::_UUID_default_instance_);
}
inline ::mesos::UUID* Event_AcknowledgeOperationStatus::release_operation_uuid() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.AcknowledgeOperationStatus.operation_uuid)
  clear_has_operation_uuid();
  ::mesos::UUID* temp = operation_uuid_;
  operation_uuid_ = NULL;
  return temp;
}
inline ::mesos::UUID* Event_AcknowledgeOperationStatus::mutable_operation_uuid() {
  set_has_operation_uuid();
  if (operation_uuid_ == NULL) {
    operation_uuid_ = new ::mesos::UUID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.AcknowledgeOperationStatus.operation_uuid)
  return operation_uuid_;
}
inline void Event_AcknowledgeOperationStatus::set_allocated_operation_uuid(::mesos::UUID* operation_uuid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(operation_uuid_);
  }
  if (operation_uuid) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(operation_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      operation_uuid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operation_uuid, submessage_arena);
    }
    set_has_operation_uuid();
  } else {
    clear_has_operation_uuid();
  }
  operation_uuid_ = operation_uuid;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.AcknowledgeOperationStatus.operation_uuid)
}

// -------------------------------------------------------------------

// Event_ReconcileOperations

// repeated .mesos.UUID operation_uuids = 1;
inline int Event_ReconcileOperations::operation_uuids_size() const {
  return operation_uuids_.size();
}
inline const ::mesos::UUID& Event_ReconcileOperations::operation_uuids(int index) const {
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.ReconcileOperations.operation_uuids)
  return operation_uuids_.Get(index);
}
inline ::mesos::UUID* Event_ReconcileOperations::mutable_operation_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.ReconcileOperations.operation_uuids)
  return operation_uuids_.Mutable(index);
}
inline ::mesos::UUID* Event_ReconcileOperations::add_operation_uuids() {
  // @@protoc_insertion_point(field_add:mesos.resource_provider.Event.ReconcileOperations.operation_uuids)
  return operation_uuids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::UUID >*
Event_ReconcileOperations::mutable_operation_uuids() {
  // @@protoc_insertion_point(field_mutable_list:mesos.resource_provider.Event.ReconcileOperations.operation_uuids)
  return &operation_uuids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::UUID >&
Event_ReconcileOperations::operation_uuids() const {
  // @@protoc_insertion_point(field_list:mesos.resource_provider.Event.ReconcileOperations.operation_uuids)
  return operation_uuids_;
}

// -------------------------------------------------------------------

// Event

// optional .mesos.resource_provider.Event.Type type = 1;
inline bool Event::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::mesos::resource_provider::Event_Type Event::type() const {
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.type)
  return static_cast< ::mesos::resource_provider::Event_Type >(type_);
}
inline void Event::set_type(::mesos::resource_provider::Event_Type value) {
  assert(::mesos::resource_provider::Event_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mesos.resource_provider.Event.type)
}

// optional .mesos.resource_provider.Event.Subscribed subscribed = 2;
inline bool Event::has_subscribed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_subscribed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_subscribed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_subscribed() {
  if (subscribed_ != NULL) subscribed_->Clear();
  clear_has_subscribed();
}
inline const ::mesos::resource_provider::Event_Subscribed& Event::subscribed() const {
  const ::mesos::resource_provider::Event_Subscribed* p = subscribed_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.subscribed)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::resource_provider::Event_Subscribed*>(
      &::mesos::resource_provider::_Event_Subscribed_default_instance_);
}
inline ::mesos::resource_provider::Event_Subscribed* Event::release_subscribed() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.subscribed)
  clear_has_subscribed();
  ::mesos::resource_provider::Event_Subscribed* temp = subscribed_;
  subscribed_ = NULL;
  return temp;
}
inline ::mesos::resource_provider::Event_Subscribed* Event::mutable_subscribed() {
  set_has_subscribed();
  if (subscribed_ == NULL) {
    subscribed_ = new ::mesos::resource_provider::Event_Subscribed;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.subscribed)
  return subscribed_;
}
inline void Event::set_allocated_subscribed(::mesos::resource_provider::Event_Subscribed* subscribed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete subscribed_;
  }
  if (subscribed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subscribed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subscribed, submessage_arena);
    }
    set_has_subscribed();
  } else {
    clear_has_subscribed();
  }
  subscribed_ = subscribed;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.subscribed)
}

// optional .mesos.resource_provider.Event.ApplyOperation apply_operation = 3;
inline bool Event::has_apply_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_apply_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_apply_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_apply_operation() {
  if (apply_operation_ != NULL) apply_operation_->Clear();
  clear_has_apply_operation();
}
inline const ::mesos::resource_provider::Event_ApplyOperation& Event::apply_operation() const {
  const ::mesos::resource_provider::Event_ApplyOperation* p = apply_operation_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.apply_operation)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::resource_provider::Event_ApplyOperation*>(
      &::mesos::resource_provider::_Event_ApplyOperation_default_instance_);
}
inline ::mesos::resource_provider::Event_ApplyOperation* Event::release_apply_operation() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.apply_operation)
  clear_has_apply_operation();
  ::mesos::resource_provider::Event_ApplyOperation* temp = apply_operation_;
  apply_operation_ = NULL;
  return temp;
}
inline ::mesos::resource_provider::Event_ApplyOperation* Event::mutable_apply_operation() {
  set_has_apply_operation();
  if (apply_operation_ == NULL) {
    apply_operation_ = new ::mesos::resource_provider::Event_ApplyOperation;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.apply_operation)
  return apply_operation_;
}
inline void Event::set_allocated_apply_operation(::mesos::resource_provider::Event_ApplyOperation* apply_operation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete apply_operation_;
  }
  if (apply_operation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      apply_operation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, apply_operation, submessage_arena);
    }
    set_has_apply_operation();
  } else {
    clear_has_apply_operation();
  }
  apply_operation_ = apply_operation;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.apply_operation)
}

// optional .mesos.resource_provider.Event.PublishResources publish_resources = 4;
inline bool Event::has_publish_resources() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_publish_resources() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_publish_resources() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_publish_resources() {
  if (publish_resources_ != NULL) publish_resources_->Clear();
  clear_has_publish_resources();
}
inline const ::mesos::resource_provider::Event_PublishResources& Event::publish_resources() const {
  const ::mesos::resource_provider::Event_PublishResources* p = publish_resources_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.publish_resources)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::resource_provider::Event_PublishResources*>(
      &::mesos::resource_provider::_Event_PublishResources_default_instance_);
}
inline ::mesos::resource_provider::Event_PublishResources* Event::release_publish_resources() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.publish_resources)
  clear_has_publish_resources();
  ::mesos::resource_provider::Event_PublishResources* temp = publish_resources_;
  publish_resources_ = NULL;
  return temp;
}
inline ::mesos::resource_provider::Event_PublishResources* Event::mutable_publish_resources() {
  set_has_publish_resources();
  if (publish_resources_ == NULL) {
    publish_resources_ = new ::mesos::resource_provider::Event_PublishResources;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.publish_resources)
  return publish_resources_;
}
inline void Event::set_allocated_publish_resources(::mesos::resource_provider::Event_PublishResources* publish_resources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete publish_resources_;
  }
  if (publish_resources) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      publish_resources = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, publish_resources, submessage_arena);
    }
    set_has_publish_resources();
  } else {
    clear_has_publish_resources();
  }
  publish_resources_ = publish_resources;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.publish_resources)
}

// optional .mesos.resource_provider.Event.AcknowledgeOperationStatus acknowledge_operation_status = 5;
inline bool Event::has_acknowledge_operation_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_acknowledge_operation_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_acknowledge_operation_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_acknowledge_operation_status() {
  if (acknowledge_operation_status_ != NULL) acknowledge_operation_status_->Clear();
  clear_has_acknowledge_operation_status();
}
inline const ::mesos::resource_provider::Event_AcknowledgeOperationStatus& Event::acknowledge_operation_status() const {
  const ::mesos::resource_provider::Event_AcknowledgeOperationStatus* p = acknowledge_operation_status_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.acknowledge_operation_status)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::resource_provider::Event_AcknowledgeOperationStatus*>(
      &::mesos::resource_provider::_Event_AcknowledgeOperationStatus_default_instance_);
}
inline ::mesos::resource_provider::Event_AcknowledgeOperationStatus* Event::release_acknowledge_operation_status() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.acknowledge_operation_status)
  clear_has_acknowledge_operation_status();
  ::mesos::resource_provider::Event_AcknowledgeOperationStatus* temp = acknowledge_operation_status_;
  acknowledge_operation_status_ = NULL;
  return temp;
}
inline ::mesos::resource_provider::Event_AcknowledgeOperationStatus* Event::mutable_acknowledge_operation_status() {
  set_has_acknowledge_operation_status();
  if (acknowledge_operation_status_ == NULL) {
    acknowledge_operation_status_ = new ::mesos::resource_provider::Event_AcknowledgeOperationStatus;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.acknowledge_operation_status)
  return acknowledge_operation_status_;
}
inline void Event::set_allocated_acknowledge_operation_status(::mesos::resource_provider::Event_AcknowledgeOperationStatus* acknowledge_operation_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acknowledge_operation_status_;
  }
  if (acknowledge_operation_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acknowledge_operation_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acknowledge_operation_status, submessage_arena);
    }
    set_has_acknowledge_operation_status();
  } else {
    clear_has_acknowledge_operation_status();
  }
  acknowledge_operation_status_ = acknowledge_operation_status;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.acknowledge_operation_status)
}

// optional .mesos.resource_provider.Event.ReconcileOperations reconcile_operations = 6;
inline bool Event::has_reconcile_operations() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_reconcile_operations() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_reconcile_operations() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_reconcile_operations() {
  if (reconcile_operations_ != NULL) reconcile_operations_->Clear();
  clear_has_reconcile_operations();
}
inline const ::mesos::resource_provider::Event_ReconcileOperations& Event::reconcile_operations() const {
  const ::mesos::resource_provider::Event_ReconcileOperations* p = reconcile_operations_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Event.reconcile_operations)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::resource_provider::Event_ReconcileOperations*>(
      &::mesos::resource_provider::_Event_ReconcileOperations_default_instance_);
}
inline ::mesos::resource_provider::Event_ReconcileOperations* Event::release_reconcile_operations() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Event.reconcile_operations)
  clear_has_reconcile_operations();
  ::mesos::resource_provider::Event_ReconcileOperations* temp = reconcile_operations_;
  reconcile_operations_ = NULL;
  return temp;
}
inline ::mesos::resource_provider::Event_ReconcileOperations* Event::mutable_reconcile_operations() {
  set_has_reconcile_operations();
  if (reconcile_operations_ == NULL) {
    reconcile_operations_ = new ::mesos::resource_provider::Event_ReconcileOperations;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Event.reconcile_operations)
  return reconcile_operations_;
}
inline void Event::set_allocated_reconcile_operations(::mesos::resource_provider::Event_ReconcileOperations* reconcile_operations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reconcile_operations_;
  }
  if (reconcile_operations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reconcile_operations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reconcile_operations, submessage_arena);
    }
    set_has_reconcile_operations();
  } else {
    clear_has_reconcile_operations();
  }
  reconcile_operations_ = reconcile_operations;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Event.reconcile_operations)
}

// -------------------------------------------------------------------

// Call_Subscribe

// required .mesos.ResourceProviderInfo resource_provider_info = 1;
inline bool Call_Subscribe::has_resource_provider_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_Subscribe::set_has_resource_provider_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_Subscribe::clear_has_resource_provider_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::ResourceProviderInfo& Call_Subscribe::resource_provider_info() const {
  const ::mesos::ResourceProviderInfo* p = resource_provider_info_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.Subscribe.resource_provider_info)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::ResourceProviderInfo*>(
      &::mesos::_ResourceProviderInfo_default_instance_);
}
inline ::mesos::ResourceProviderInfo* Call_Subscribe::release_resource_provider_info() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Call.Subscribe.resource_provider_info)
  clear_has_resource_provider_info();
  ::mesos::ResourceProviderInfo* temp = resource_provider_info_;
  resource_provider_info_ = NULL;
  return temp;
}
inline ::mesos::ResourceProviderInfo* Call_Subscribe::mutable_resource_provider_info() {
  set_has_resource_provider_info();
  if (resource_provider_info_ == NULL) {
    resource_provider_info_ = new ::mesos::ResourceProviderInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.Subscribe.resource_provider_info)
  return resource_provider_info_;
}
inline void Call_Subscribe::set_allocated_resource_provider_info(::mesos::ResourceProviderInfo* resource_provider_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resource_provider_info_);
  }
  if (resource_provider_info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(resource_provider_info)->GetArena();
    if (message_arena != submessage_arena) {
      resource_provider_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource_provider_info, submessage_arena);
    }
    set_has_resource_provider_info();
  } else {
    clear_has_resource_provider_info();
  }
  resource_provider_info_ = resource_provider_info;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Call.Subscribe.resource_provider_info)
}

// -------------------------------------------------------------------

// Call_UpdateOperationStatus

// optional .mesos.FrameworkID framework_id = 1;
inline bool Call_UpdateOperationStatus::has_framework_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_UpdateOperationStatus::set_has_framework_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_UpdateOperationStatus::clear_has_framework_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::FrameworkID& Call_UpdateOperationStatus::framework_id() const {
  const ::mesos::FrameworkID* p = framework_id_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.UpdateOperationStatus.framework_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::FrameworkID*>(
      &::mesos::_FrameworkID_default_instance_);
}
inline ::mesos::FrameworkID* Call_UpdateOperationStatus::release_framework_id() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Call.UpdateOperationStatus.framework_id)
  clear_has_framework_id();
  ::mesos::FrameworkID* temp = framework_id_;
  framework_id_ = NULL;
  return temp;
}
inline ::mesos::FrameworkID* Call_UpdateOperationStatus::mutable_framework_id() {
  set_has_framework_id();
  if (framework_id_ == NULL) {
    framework_id_ = new ::mesos::FrameworkID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.UpdateOperationStatus.framework_id)
  return framework_id_;
}
inline void Call_UpdateOperationStatus::set_allocated_framework_id(::mesos::FrameworkID* framework_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(framework_id_);
  }
  if (framework_id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(framework_id)->GetArena();
    if (message_arena != submessage_arena) {
      framework_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, framework_id, submessage_arena);
    }
    set_has_framework_id();
  } else {
    clear_has_framework_id();
  }
  framework_id_ = framework_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Call.UpdateOperationStatus.framework_id)
}

// required .mesos.OperationStatus status = 2;
inline bool Call_UpdateOperationStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Call_UpdateOperationStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Call_UpdateOperationStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mesos::OperationStatus& Call_UpdateOperationStatus::status() const {
  const ::mesos::OperationStatus* p = status_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.UpdateOperationStatus.status)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::OperationStatus*>(
      &::mesos::_OperationStatus_default_instance_);
}
inline ::mesos::OperationStatus* Call_UpdateOperationStatus::release_status() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Call.UpdateOperationStatus.status)
  clear_has_status();
  ::mesos::OperationStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::mesos::OperationStatus* Call_UpdateOperationStatus::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::mesos::OperationStatus;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.UpdateOperationStatus.status)
  return status_;
}
inline void Call_UpdateOperationStatus::set_allocated_status(::mesos::OperationStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Call.UpdateOperationStatus.status)
}

// optional .mesos.OperationStatus latest_status = 3;
inline bool Call_UpdateOperationStatus::has_latest_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Call_UpdateOperationStatus::set_has_latest_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Call_UpdateOperationStatus::clear_has_latest_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mesos::OperationStatus& Call_UpdateOperationStatus::latest_status() const {
  const ::mesos::OperationStatus* p = latest_status_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.UpdateOperationStatus.latest_status)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::OperationStatus*>(
      &::mesos::_OperationStatus_default_instance_);
}
inline ::mesos::OperationStatus* Call_UpdateOperationStatus::release_latest_status() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Call.UpdateOperationStatus.latest_status)
  clear_has_latest_status();
  ::mesos::OperationStatus* temp = latest_status_;
  latest_status_ = NULL;
  return temp;
}
inline ::mesos::OperationStatus* Call_UpdateOperationStatus::mutable_latest_status() {
  set_has_latest_status();
  if (latest_status_ == NULL) {
    latest_status_ = new ::mesos::OperationStatus;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.UpdateOperationStatus.latest_status)
  return latest_status_;
}
inline void Call_UpdateOperationStatus::set_allocated_latest_status(::mesos::OperationStatus* latest_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(latest_status_);
  }
  if (latest_status) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(latest_status)->GetArena();
    if (message_arena != submessage_arena) {
      latest_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latest_status, submessage_arena);
    }
    set_has_latest_status();
  } else {
    clear_has_latest_status();
  }
  latest_status_ = latest_status;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Call.UpdateOperationStatus.latest_status)
}

// required .mesos.UUID operation_uuid = 4;
inline bool Call_UpdateOperationStatus::has_operation_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Call_UpdateOperationStatus::set_has_operation_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Call_UpdateOperationStatus::clear_has_operation_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mesos::UUID& Call_UpdateOperationStatus::operation_uuid() const {
  const ::mesos::UUID* p = operation_uuid_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.UpdateOperationStatus.operation_uuid)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::UUID*>(
      &::mesos::_UUID_default_instance_);
}
inline ::mesos::UUID* Call_UpdateOperationStatus::release_operation_uuid() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Call.UpdateOperationStatus.operation_uuid)
  clear_has_operation_uuid();
  ::mesos::UUID* temp = operation_uuid_;
  operation_uuid_ = NULL;
  return temp;
}
inline ::mesos::UUID* Call_UpdateOperationStatus::mutable_operation_uuid() {
  set_has_operation_uuid();
  if (operation_uuid_ == NULL) {
    operation_uuid_ = new ::mesos::UUID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.UpdateOperationStatus.operation_uuid)
  return operation_uuid_;
}
inline void Call_UpdateOperationStatus::set_allocated_operation_uuid(::mesos::UUID* operation_uuid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(operation_uuid_);
  }
  if (operation_uuid) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(operation_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      operation_uuid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operation_uuid, submessage_arena);
    }
    set_has_operation_uuid();
  } else {
    clear_has_operation_uuid();
  }
  operation_uuid_ = operation_uuid;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Call.UpdateOperationStatus.operation_uuid)
}

// -------------------------------------------------------------------

// Call_UpdateState

// repeated .mesos.Operation operations = 1;
inline int Call_UpdateState::operations_size() const {
  return operations_.size();
}
inline const ::mesos::Operation& Call_UpdateState::operations(int index) const {
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.UpdateState.operations)
  return operations_.Get(index);
}
inline ::mesos::Operation* Call_UpdateState::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.UpdateState.operations)
  return operations_.Mutable(index);
}
inline ::mesos::Operation* Call_UpdateState::add_operations() {
  // @@protoc_insertion_point(field_add:mesos.resource_provider.Call.UpdateState.operations)
  return operations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Operation >*
Call_UpdateState::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:mesos.resource_provider.Call.UpdateState.operations)
  return &operations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Operation >&
Call_UpdateState::operations() const {
  // @@protoc_insertion_point(field_list:mesos.resource_provider.Call.UpdateState.operations)
  return operations_;
}

// repeated .mesos.Resource resources = 2;
inline int Call_UpdateState::resources_size() const {
  return resources_.size();
}
inline const ::mesos::Resource& Call_UpdateState::resources(int index) const {
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.UpdateState.resources)
  return resources_.Get(index);
}
inline ::mesos::Resource* Call_UpdateState::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.UpdateState.resources)
  return resources_.Mutable(index);
}
inline ::mesos::Resource* Call_UpdateState::add_resources() {
  // @@protoc_insertion_point(field_add:mesos.resource_provider.Call.UpdateState.resources)
  return resources_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
Call_UpdateState::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:mesos.resource_provider.Call.UpdateState.resources)
  return &resources_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
Call_UpdateState::resources() const {
  // @@protoc_insertion_point(field_list:mesos.resource_provider.Call.UpdateState.resources)
  return resources_;
}

// required .mesos.UUID resource_version_uuid = 3;
inline bool Call_UpdateState::has_resource_version_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_UpdateState::set_has_resource_version_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_UpdateState::clear_has_resource_version_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::UUID& Call_UpdateState::resource_version_uuid() const {
  const ::mesos::UUID* p = resource_version_uuid_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.UpdateState.resource_version_uuid)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::UUID*>(
      &::mesos::_UUID_default_instance_);
}
inline ::mesos::UUID* Call_UpdateState::release_resource_version_uuid() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Call.UpdateState.resource_version_uuid)
  clear_has_resource_version_uuid();
  ::mesos::UUID* temp = resource_version_uuid_;
  resource_version_uuid_ = NULL;
  return temp;
}
inline ::mesos::UUID* Call_UpdateState::mutable_resource_version_uuid() {
  set_has_resource_version_uuid();
  if (resource_version_uuid_ == NULL) {
    resource_version_uuid_ = new ::mesos::UUID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.UpdateState.resource_version_uuid)
  return resource_version_uuid_;
}
inline void Call_UpdateState::set_allocated_resource_version_uuid(::mesos::UUID* resource_version_uuid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resource_version_uuid_);
  }
  if (resource_version_uuid) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(resource_version_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      resource_version_uuid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource_version_uuid, submessage_arena);
    }
    set_has_resource_version_uuid();
  } else {
    clear_has_resource_version_uuid();
  }
  resource_version_uuid_ = resource_version_uuid;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Call.UpdateState.resource_version_uuid)
}

// -------------------------------------------------------------------

// Call_UpdatePublishResourcesStatus

// required .mesos.UUID uuid = 1;
inline bool Call_UpdatePublishResourcesStatus::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_UpdatePublishResourcesStatus::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_UpdatePublishResourcesStatus::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::UUID& Call_UpdatePublishResourcesStatus::uuid() const {
  const ::mesos::UUID* p = uuid_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.UpdatePublishResourcesStatus.uuid)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::UUID*>(
      &::mesos::_UUID_default_instance_);
}
inline ::mesos::UUID* Call_UpdatePublishResourcesStatus::release_uuid() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Call.UpdatePublishResourcesStatus.uuid)
  clear_has_uuid();
  ::mesos::UUID* temp = uuid_;
  uuid_ = NULL;
  return temp;
}
inline ::mesos::UUID* Call_UpdatePublishResourcesStatus::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == NULL) {
    uuid_ = new ::mesos::UUID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.UpdatePublishResourcesStatus.uuid)
  return uuid_;
}
inline void Call_UpdatePublishResourcesStatus::set_allocated_uuid(::mesos::UUID* uuid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(uuid)->GetArena();
    if (message_arena != submessage_arena) {
      uuid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Call.UpdatePublishResourcesStatus.uuid)
}

// required .mesos.resource_provider.Call.UpdatePublishResourcesStatus.Status status = 2;
inline bool Call_UpdatePublishResourcesStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Call_UpdatePublishResourcesStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Call_UpdatePublishResourcesStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Call_UpdatePublishResourcesStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::mesos::resource_provider::Call_UpdatePublishResourcesStatus_Status Call_UpdatePublishResourcesStatus::status() const {
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.UpdatePublishResourcesStatus.status)
  return static_cast< ::mesos::resource_provider::Call_UpdatePublishResourcesStatus_Status >(status_);
}
inline void Call_UpdatePublishResourcesStatus::set_status(::mesos::resource_provider::Call_UpdatePublishResourcesStatus_Status value) {
  assert(::mesos::resource_provider::Call_UpdatePublishResourcesStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:mesos.resource_provider.Call.UpdatePublishResourcesStatus.status)
}

// -------------------------------------------------------------------

// Call

// optional .mesos.ResourceProviderID resource_provider_id = 1;
inline bool Call::has_resource_provider_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call::set_has_resource_provider_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call::clear_has_resource_provider_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::ResourceProviderID& Call::resource_provider_id() const {
  const ::mesos::ResourceProviderID* p = resource_provider_id_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.resource_provider_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::ResourceProviderID*>(
      &::mesos::_ResourceProviderID_default_instance_);
}
inline ::mesos::ResourceProviderID* Call::release_resource_provider_id() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Call.resource_provider_id)
  clear_has_resource_provider_id();
  ::mesos::ResourceProviderID* temp = resource_provider_id_;
  resource_provider_id_ = NULL;
  return temp;
}
inline ::mesos::ResourceProviderID* Call::mutable_resource_provider_id() {
  set_has_resource_provider_id();
  if (resource_provider_id_ == NULL) {
    resource_provider_id_ = new ::mesos::ResourceProviderID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.resource_provider_id)
  return resource_provider_id_;
}
inline void Call::set_allocated_resource_provider_id(::mesos::ResourceProviderID* resource_provider_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resource_provider_id_);
  }
  if (resource_provider_id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(resource_provider_id)->GetArena();
    if (message_arena != submessage_arena) {
      resource_provider_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource_provider_id, submessage_arena);
    }
    set_has_resource_provider_id();
  } else {
    clear_has_resource_provider_id();
  }
  resource_provider_id_ = resource_provider_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Call.resource_provider_id)
}

// optional .mesos.resource_provider.Call.Type type = 2;
inline bool Call::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Call::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Call::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Call::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::mesos::resource_provider::Call_Type Call::type() const {
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.type)
  return static_cast< ::mesos::resource_provider::Call_Type >(type_);
}
inline void Call::set_type(::mesos::resource_provider::Call_Type value) {
  assert(::mesos::resource_provider::Call_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mesos.resource_provider.Call.type)
}

// optional .mesos.resource_provider.Call.Subscribe subscribe = 3;
inline bool Call::has_subscribe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Call::set_has_subscribe() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Call::clear_has_subscribe() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Call::clear_subscribe() {
  if (subscribe_ != NULL) subscribe_->Clear();
  clear_has_subscribe();
}
inline const ::mesos::resource_provider::Call_Subscribe& Call::subscribe() const {
  const ::mesos::resource_provider::Call_Subscribe* p = subscribe_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.subscribe)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::resource_provider::Call_Subscribe*>(
      &::mesos::resource_provider::_Call_Subscribe_default_instance_);
}
inline ::mesos::resource_provider::Call_Subscribe* Call::release_subscribe() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Call.subscribe)
  clear_has_subscribe();
  ::mesos::resource_provider::Call_Subscribe* temp = subscribe_;
  subscribe_ = NULL;
  return temp;
}
inline ::mesos::resource_provider::Call_Subscribe* Call::mutable_subscribe() {
  set_has_subscribe();
  if (subscribe_ == NULL) {
    subscribe_ = new ::mesos::resource_provider::Call_Subscribe;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.subscribe)
  return subscribe_;
}
inline void Call::set_allocated_subscribe(::mesos::resource_provider::Call_Subscribe* subscribe) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete subscribe_;
  }
  if (subscribe) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subscribe = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subscribe, submessage_arena);
    }
    set_has_subscribe();
  } else {
    clear_has_subscribe();
  }
  subscribe_ = subscribe;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Call.subscribe)
}

// optional .mesos.resource_provider.Call.UpdateOperationStatus update_operation_status = 4;
inline bool Call::has_update_operation_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Call::set_has_update_operation_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Call::clear_has_update_operation_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Call::clear_update_operation_status() {
  if (update_operation_status_ != NULL) update_operation_status_->Clear();
  clear_has_update_operation_status();
}
inline const ::mesos::resource_provider::Call_UpdateOperationStatus& Call::update_operation_status() const {
  const ::mesos::resource_provider::Call_UpdateOperationStatus* p = update_operation_status_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.update_operation_status)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::resource_provider::Call_UpdateOperationStatus*>(
      &::mesos::resource_provider::_Call_UpdateOperationStatus_default_instance_);
}
inline ::mesos::resource_provider::Call_UpdateOperationStatus* Call::release_update_operation_status() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Call.update_operation_status)
  clear_has_update_operation_status();
  ::mesos::resource_provider::Call_UpdateOperationStatus* temp = update_operation_status_;
  update_operation_status_ = NULL;
  return temp;
}
inline ::mesos::resource_provider::Call_UpdateOperationStatus* Call::mutable_update_operation_status() {
  set_has_update_operation_status();
  if (update_operation_status_ == NULL) {
    update_operation_status_ = new ::mesos::resource_provider::Call_UpdateOperationStatus;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.update_operation_status)
  return update_operation_status_;
}
inline void Call::set_allocated_update_operation_status(::mesos::resource_provider::Call_UpdateOperationStatus* update_operation_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_operation_status_;
  }
  if (update_operation_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_operation_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_operation_status, submessage_arena);
    }
    set_has_update_operation_status();
  } else {
    clear_has_update_operation_status();
  }
  update_operation_status_ = update_operation_status;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Call.update_operation_status)
}

// optional .mesos.resource_provider.Call.UpdateState update_state = 5;
inline bool Call::has_update_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Call::set_has_update_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Call::clear_has_update_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Call::clear_update_state() {
  if (update_state_ != NULL) update_state_->Clear();
  clear_has_update_state();
}
inline const ::mesos::resource_provider::Call_UpdateState& Call::update_state() const {
  const ::mesos::resource_provider::Call_UpdateState* p = update_state_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.update_state)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::resource_provider::Call_UpdateState*>(
      &::mesos::resource_provider::_Call_UpdateState_default_instance_);
}
inline ::mesos::resource_provider::Call_UpdateState* Call::release_update_state() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Call.update_state)
  clear_has_update_state();
  ::mesos::resource_provider::Call_UpdateState* temp = update_state_;
  update_state_ = NULL;
  return temp;
}
inline ::mesos::resource_provider::Call_UpdateState* Call::mutable_update_state() {
  set_has_update_state();
  if (update_state_ == NULL) {
    update_state_ = new ::mesos::resource_provider::Call_UpdateState;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.update_state)
  return update_state_;
}
inline void Call::set_allocated_update_state(::mesos::resource_provider::Call_UpdateState* update_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_state_;
  }
  if (update_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_state, submessage_arena);
    }
    set_has_update_state();
  } else {
    clear_has_update_state();
  }
  update_state_ = update_state;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Call.update_state)
}

// optional .mesos.resource_provider.Call.UpdatePublishResourcesStatus update_publish_resources_status = 6;
inline bool Call::has_update_publish_resources_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Call::set_has_update_publish_resources_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Call::clear_has_update_publish_resources_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Call::clear_update_publish_resources_status() {
  if (update_publish_resources_status_ != NULL) update_publish_resources_status_->Clear();
  clear_has_update_publish_resources_status();
}
inline const ::mesos::resource_provider::Call_UpdatePublishResourcesStatus& Call::update_publish_resources_status() const {
  const ::mesos::resource_provider::Call_UpdatePublishResourcesStatus* p = update_publish_resources_status_;
  // @@protoc_insertion_point(field_get:mesos.resource_provider.Call.update_publish_resources_status)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::resource_provider::Call_UpdatePublishResourcesStatus*>(
      &::mesos::resource_provider::_Call_UpdatePublishResourcesStatus_default_instance_);
}
inline ::mesos::resource_provider::Call_UpdatePublishResourcesStatus* Call::release_update_publish_resources_status() {
  // @@protoc_insertion_point(field_release:mesos.resource_provider.Call.update_publish_resources_status)
  clear_has_update_publish_resources_status();
  ::mesos::resource_provider::Call_UpdatePublishResourcesStatus* temp = update_publish_resources_status_;
  update_publish_resources_status_ = NULL;
  return temp;
}
inline ::mesos::resource_provider::Call_UpdatePublishResourcesStatus* Call::mutable_update_publish_resources_status() {
  set_has_update_publish_resources_status();
  if (update_publish_resources_status_ == NULL) {
    update_publish_resources_status_ = new ::mesos::resource_provider::Call_UpdatePublishResourcesStatus;
  }
  // @@protoc_insertion_point(field_mutable:mesos.resource_provider.Call.update_publish_resources_status)
  return update_publish_resources_status_;
}
inline void Call::set_allocated_update_publish_resources_status(::mesos::resource_provider::Call_UpdatePublishResourcesStatus* update_publish_resources_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_publish_resources_status_;
  }
  if (update_publish_resources_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_publish_resources_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_publish_resources_status, submessage_arena);
    }
    set_has_update_publish_resources_status();
  } else {
    clear_has_update_publish_resources_status();
  }
  update_publish_resources_status_ = update_publish_resources_status;
  // @@protoc_insertion_point(field_set_allocated:mesos.resource_provider.Call.update_publish_resources_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resource_provider
}  // namespace mesos

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mesos::resource_provider::Event_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::resource_provider::Event_Type>() {
  return ::mesos::resource_provider::Event_Type_descriptor();
}
template <> struct is_proto_enum< ::mesos::resource_provider::Call_UpdatePublishResourcesStatus_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::resource_provider::Call_UpdatePublishResourcesStatus_Status>() {
  return ::mesos::resource_provider::Call_UpdatePublishResourcesStatus_Status_descriptor();
}
template <> struct is_proto_enum< ::mesos::resource_provider::Call_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::resource_provider::Call_Type>() {
  return ::mesos::resource_provider::Call_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2fresource_5fprovider_2fresource_5fprovider_2eproto__INCLUDED

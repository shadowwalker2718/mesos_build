// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/fetcher/fetcher.proto

#ifndef PROTOBUF_mesos_2ffetcher_2ffetcher_2eproto__INCLUDED
#define PROTOBUF_mesos_2ffetcher_2ffetcher_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos/mesos.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_mesos_2ffetcher_2ffetcher_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFetcherInfo_ItemImpl();
void InitDefaultsFetcherInfo_Item();
void InitDefaultsFetcherInfoImpl();
void InitDefaultsFetcherInfo();
inline void InitDefaults() {
  InitDefaultsFetcherInfo_Item();
  InitDefaultsFetcherInfo();
}
}  // namespace protobuf_mesos_2ffetcher_2ffetcher_2eproto
namespace mesos {
namespace fetcher {
class FetcherInfo;
class FetcherInfoDefaultTypeInternal;
extern FetcherInfoDefaultTypeInternal _FetcherInfo_default_instance_;
class FetcherInfo_Item;
class FetcherInfo_ItemDefaultTypeInternal;
extern FetcherInfo_ItemDefaultTypeInternal _FetcherInfo_Item_default_instance_;
}  // namespace fetcher
}  // namespace mesos
namespace mesos {
namespace fetcher {

enum FetcherInfo_Item_Action {
  FetcherInfo_Item_Action_BYPASS_CACHE = 0,
  FetcherInfo_Item_Action_DOWNLOAD_AND_CACHE = 1,
  FetcherInfo_Item_Action_RETRIEVE_FROM_CACHE = 2
};
bool FetcherInfo_Item_Action_IsValid(int value);
const FetcherInfo_Item_Action FetcherInfo_Item_Action_Action_MIN = FetcherInfo_Item_Action_BYPASS_CACHE;
const FetcherInfo_Item_Action FetcherInfo_Item_Action_Action_MAX = FetcherInfo_Item_Action_RETRIEVE_FROM_CACHE;
const int FetcherInfo_Item_Action_Action_ARRAYSIZE = FetcherInfo_Item_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* FetcherInfo_Item_Action_descriptor();
inline const ::std::string& FetcherInfo_Item_Action_Name(FetcherInfo_Item_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    FetcherInfo_Item_Action_descriptor(), value);
}
inline bool FetcherInfo_Item_Action_Parse(
    const ::std::string& name, FetcherInfo_Item_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FetcherInfo_Item_Action>(
    FetcherInfo_Item_Action_descriptor(), name, value);
}
// ===================================================================

class FetcherInfo_Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.fetcher.FetcherInfo.Item) */ {
 public:
  FetcherInfo_Item();
  virtual ~FetcherInfo_Item();

  FetcherInfo_Item(const FetcherInfo_Item& from);

  inline FetcherInfo_Item& operator=(const FetcherInfo_Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetcherInfo_Item(FetcherInfo_Item&& from) noexcept
    : FetcherInfo_Item() {
    *this = ::std::move(from);
  }

  inline FetcherInfo_Item& operator=(FetcherInfo_Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetcherInfo_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetcherInfo_Item* internal_default_instance() {
    return reinterpret_cast<const FetcherInfo_Item*>(
               &_FetcherInfo_Item_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FetcherInfo_Item* other);
  friend void swap(FetcherInfo_Item& a, FetcherInfo_Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetcherInfo_Item* New() const PROTOBUF_FINAL { return New(NULL); }

  FetcherInfo_Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetcherInfo_Item& from);
  void MergeFrom(const FetcherInfo_Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetcherInfo_Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FetcherInfo_Item_Action Action;
  static const Action BYPASS_CACHE =
    FetcherInfo_Item_Action_BYPASS_CACHE;
  static const Action DOWNLOAD_AND_CACHE =
    FetcherInfo_Item_Action_DOWNLOAD_AND_CACHE;
  static const Action RETRIEVE_FROM_CACHE =
    FetcherInfo_Item_Action_RETRIEVE_FROM_CACHE;
  static inline bool Action_IsValid(int value) {
    return FetcherInfo_Item_Action_IsValid(value);
  }
  static const Action Action_MIN =
    FetcherInfo_Item_Action_Action_MIN;
  static const Action Action_MAX =
    FetcherInfo_Item_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    FetcherInfo_Item_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return FetcherInfo_Item_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return FetcherInfo_Item_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return FetcherInfo_Item_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string cache_filename = 3;
  bool has_cache_filename() const;
  void clear_cache_filename();
  static const int kCacheFilenameFieldNumber = 3;
  const ::std::string& cache_filename() const;
  void set_cache_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_cache_filename(::std::string&& value);
  #endif
  void set_cache_filename(const char* value);
  void set_cache_filename(const char* value, size_t size);
  ::std::string* mutable_cache_filename();
  ::std::string* release_cache_filename();
  void set_allocated_cache_filename(::std::string* cache_filename);

  // required .mesos.CommandInfo.URI uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::mesos::CommandInfo_URI& uri() const;
  ::mesos::CommandInfo_URI* release_uri();
  ::mesos::CommandInfo_URI* mutable_uri();
  void set_allocated_uri(::mesos::CommandInfo_URI* uri);

  // required .mesos.fetcher.FetcherInfo.Item.Action action = 2;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::mesos::fetcher::FetcherInfo_Item_Action action() const;
  void set_action(::mesos::fetcher::FetcherInfo_Item_Action value);

  // @@protoc_insertion_point(class_scope:mesos.fetcher.FetcherInfo.Item)
 private:
  void set_has_uri();
  void clear_has_uri();
  void set_has_action();
  void clear_has_action();
  void set_has_cache_filename();
  void clear_has_cache_filename();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cache_filename_;
  ::mesos::CommandInfo_URI* uri_;
  int action_;
  friend struct ::protobuf_mesos_2ffetcher_2ffetcher_2eproto::TableStruct;
  friend void ::protobuf_mesos_2ffetcher_2ffetcher_2eproto::InitDefaultsFetcherInfo_ItemImpl();
};
// -------------------------------------------------------------------

class FetcherInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.fetcher.FetcherInfo) */ {
 public:
  FetcherInfo();
  virtual ~FetcherInfo();

  FetcherInfo(const FetcherInfo& from);

  inline FetcherInfo& operator=(const FetcherInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FetcherInfo(FetcherInfo&& from) noexcept
    : FetcherInfo() {
    *this = ::std::move(from);
  }

  inline FetcherInfo& operator=(FetcherInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetcherInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetcherInfo* internal_default_instance() {
    return reinterpret_cast<const FetcherInfo*>(
               &_FetcherInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FetcherInfo* other);
  friend void swap(FetcherInfo& a, FetcherInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FetcherInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FetcherInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FetcherInfo& from);
  void MergeFrom(const FetcherInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FetcherInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FetcherInfo_Item Item;

  // accessors -------------------------------------------------------

  // repeated .mesos.fetcher.FetcherInfo.Item items = 3;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 3;
  const ::mesos::fetcher::FetcherInfo_Item& items(int index) const;
  ::mesos::fetcher::FetcherInfo_Item* mutable_items(int index);
  ::mesos::fetcher::FetcherInfo_Item* add_items();
  ::google::protobuf::RepeatedPtrField< ::mesos::fetcher::FetcherInfo_Item >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::mesos::fetcher::FetcherInfo_Item >&
      items() const;

  // required string sandbox_directory = 1;
  bool has_sandbox_directory() const;
  void clear_sandbox_directory();
  static const int kSandboxDirectoryFieldNumber = 1;
  const ::std::string& sandbox_directory() const;
  void set_sandbox_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_sandbox_directory(::std::string&& value);
  #endif
  void set_sandbox_directory(const char* value);
  void set_sandbox_directory(const char* value, size_t size);
  ::std::string* mutable_sandbox_directory();
  ::std::string* release_sandbox_directory();
  void set_allocated_sandbox_directory(::std::string* sandbox_directory);

  // optional string cache_directory = 2;
  bool has_cache_directory() const;
  void clear_cache_directory();
  static const int kCacheDirectoryFieldNumber = 2;
  const ::std::string& cache_directory() const;
  void set_cache_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_cache_directory(::std::string&& value);
  #endif
  void set_cache_directory(const char* value);
  void set_cache_directory(const char* value, size_t size);
  ::std::string* mutable_cache_directory();
  ::std::string* release_cache_directory();
  void set_allocated_cache_directory(::std::string* cache_directory);

  // optional string user = 4;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 4;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional string frameworks_home = 5;
  bool has_frameworks_home() const;
  void clear_frameworks_home();
  static const int kFrameworksHomeFieldNumber = 5;
  const ::std::string& frameworks_home() const;
  void set_frameworks_home(const ::std::string& value);
  #if LANG_CXX11
  void set_frameworks_home(::std::string&& value);
  #endif
  void set_frameworks_home(const char* value);
  void set_frameworks_home(const char* value, size_t size);
  ::std::string* mutable_frameworks_home();
  ::std::string* release_frameworks_home();
  void set_allocated_frameworks_home(::std::string* frameworks_home);

  // optional .mesos.DurationInfo stall_timeout = 6;
  bool has_stall_timeout() const;
  void clear_stall_timeout();
  static const int kStallTimeoutFieldNumber = 6;
  const ::mesos::DurationInfo& stall_timeout() const;
  ::mesos::DurationInfo* release_stall_timeout();
  ::mesos::DurationInfo* mutable_stall_timeout();
  void set_allocated_stall_timeout(::mesos::DurationInfo* stall_timeout);

  // @@protoc_insertion_point(class_scope:mesos.fetcher.FetcherInfo)
 private:
  void set_has_sandbox_directory();
  void clear_has_sandbox_directory();
  void set_has_cache_directory();
  void clear_has_cache_directory();
  void set_has_user();
  void clear_has_user();
  void set_has_frameworks_home();
  void clear_has_frameworks_home();
  void set_has_stall_timeout();
  void clear_has_stall_timeout();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::fetcher::FetcherInfo_Item > items_;
  ::google::protobuf::internal::ArenaStringPtr sandbox_directory_;
  ::google::protobuf::internal::ArenaStringPtr cache_directory_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr frameworks_home_;
  ::mesos::DurationInfo* stall_timeout_;
  friend struct ::protobuf_mesos_2ffetcher_2ffetcher_2eproto::TableStruct;
  friend void ::protobuf_mesos_2ffetcher_2ffetcher_2eproto::InitDefaultsFetcherInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FetcherInfo_Item

// required .mesos.CommandInfo.URI uri = 1;
inline bool FetcherInfo_Item::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetcherInfo_Item::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetcherInfo_Item::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mesos::CommandInfo_URI& FetcherInfo_Item::uri() const {
  const ::mesos::CommandInfo_URI* p = uri_;
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.Item.uri)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::CommandInfo_URI*>(
      &::mesos::_CommandInfo_URI_default_instance_);
}
inline ::mesos::CommandInfo_URI* FetcherInfo_Item::release_uri() {
  // @@protoc_insertion_point(field_release:mesos.fetcher.FetcherInfo.Item.uri)
  clear_has_uri();
  ::mesos::CommandInfo_URI* temp = uri_;
  uri_ = NULL;
  return temp;
}
inline ::mesos::CommandInfo_URI* FetcherInfo_Item::mutable_uri() {
  set_has_uri();
  if (uri_ == NULL) {
    uri_ = new ::mesos::CommandInfo_URI;
  }
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.Item.uri)
  return uri_;
}
inline void FetcherInfo_Item::set_allocated_uri(::mesos::CommandInfo_URI* uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(uri_);
  }
  if (uri) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(uri)->GetArena();
    if (message_arena != submessage_arena) {
      uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uri, submessage_arena);
    }
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_ = uri;
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.Item.uri)
}

// required .mesos.fetcher.FetcherInfo.Item.Action action = 2;
inline bool FetcherInfo_Item::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FetcherInfo_Item::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FetcherInfo_Item::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FetcherInfo_Item::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::mesos::fetcher::FetcherInfo_Item_Action FetcherInfo_Item::action() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.Item.action)
  return static_cast< ::mesos::fetcher::FetcherInfo_Item_Action >(action_);
}
inline void FetcherInfo_Item::set_action(::mesos::fetcher::FetcherInfo_Item_Action value) {
  assert(::mesos::fetcher::FetcherInfo_Item_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:mesos.fetcher.FetcherInfo.Item.action)
}

// optional string cache_filename = 3;
inline bool FetcherInfo_Item::has_cache_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetcherInfo_Item::set_has_cache_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetcherInfo_Item::clear_has_cache_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetcherInfo_Item::clear_cache_filename() {
  cache_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cache_filename();
}
inline const ::std::string& FetcherInfo_Item::cache_filename() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.Item.cache_filename)
  return cache_filename_.GetNoArena();
}
inline void FetcherInfo_Item::set_cache_filename(const ::std::string& value) {
  set_has_cache_filename();
  cache_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.fetcher.FetcherInfo.Item.cache_filename)
}
#if LANG_CXX11
inline void FetcherInfo_Item::set_cache_filename(::std::string&& value) {
  set_has_cache_filename();
  cache_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.fetcher.FetcherInfo.Item.cache_filename)
}
#endif
inline void FetcherInfo_Item::set_cache_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cache_filename();
  cache_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.fetcher.FetcherInfo.Item.cache_filename)
}
inline void FetcherInfo_Item::set_cache_filename(const char* value, size_t size) {
  set_has_cache_filename();
  cache_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.fetcher.FetcherInfo.Item.cache_filename)
}
inline ::std::string* FetcherInfo_Item::mutable_cache_filename() {
  set_has_cache_filename();
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.Item.cache_filename)
  return cache_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetcherInfo_Item::release_cache_filename() {
  // @@protoc_insertion_point(field_release:mesos.fetcher.FetcherInfo.Item.cache_filename)
  clear_has_cache_filename();
  return cache_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetcherInfo_Item::set_allocated_cache_filename(::std::string* cache_filename) {
  if (cache_filename != NULL) {
    set_has_cache_filename();
  } else {
    clear_has_cache_filename();
  }
  cache_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cache_filename);
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.Item.cache_filename)
}

// -------------------------------------------------------------------

// FetcherInfo

// required string sandbox_directory = 1;
inline bool FetcherInfo::has_sandbox_directory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetcherInfo::set_has_sandbox_directory() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetcherInfo::clear_has_sandbox_directory() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetcherInfo::clear_sandbox_directory() {
  sandbox_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sandbox_directory();
}
inline const ::std::string& FetcherInfo::sandbox_directory() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.sandbox_directory)
  return sandbox_directory_.GetNoArena();
}
inline void FetcherInfo::set_sandbox_directory(const ::std::string& value) {
  set_has_sandbox_directory();
  sandbox_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.fetcher.FetcherInfo.sandbox_directory)
}
#if LANG_CXX11
inline void FetcherInfo::set_sandbox_directory(::std::string&& value) {
  set_has_sandbox_directory();
  sandbox_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.fetcher.FetcherInfo.sandbox_directory)
}
#endif
inline void FetcherInfo::set_sandbox_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sandbox_directory();
  sandbox_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.fetcher.FetcherInfo.sandbox_directory)
}
inline void FetcherInfo::set_sandbox_directory(const char* value, size_t size) {
  set_has_sandbox_directory();
  sandbox_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.fetcher.FetcherInfo.sandbox_directory)
}
inline ::std::string* FetcherInfo::mutable_sandbox_directory() {
  set_has_sandbox_directory();
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.sandbox_directory)
  return sandbox_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetcherInfo::release_sandbox_directory() {
  // @@protoc_insertion_point(field_release:mesos.fetcher.FetcherInfo.sandbox_directory)
  clear_has_sandbox_directory();
  return sandbox_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetcherInfo::set_allocated_sandbox_directory(::std::string* sandbox_directory) {
  if (sandbox_directory != NULL) {
    set_has_sandbox_directory();
  } else {
    clear_has_sandbox_directory();
  }
  sandbox_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sandbox_directory);
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.sandbox_directory)
}

// optional string cache_directory = 2;
inline bool FetcherInfo::has_cache_directory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetcherInfo::set_has_cache_directory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetcherInfo::clear_has_cache_directory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetcherInfo::clear_cache_directory() {
  cache_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cache_directory();
}
inline const ::std::string& FetcherInfo::cache_directory() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.cache_directory)
  return cache_directory_.GetNoArena();
}
inline void FetcherInfo::set_cache_directory(const ::std::string& value) {
  set_has_cache_directory();
  cache_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.fetcher.FetcherInfo.cache_directory)
}
#if LANG_CXX11
inline void FetcherInfo::set_cache_directory(::std::string&& value) {
  set_has_cache_directory();
  cache_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.fetcher.FetcherInfo.cache_directory)
}
#endif
inline void FetcherInfo::set_cache_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cache_directory();
  cache_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.fetcher.FetcherInfo.cache_directory)
}
inline void FetcherInfo::set_cache_directory(const char* value, size_t size) {
  set_has_cache_directory();
  cache_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.fetcher.FetcherInfo.cache_directory)
}
inline ::std::string* FetcherInfo::mutable_cache_directory() {
  set_has_cache_directory();
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.cache_directory)
  return cache_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetcherInfo::release_cache_directory() {
  // @@protoc_insertion_point(field_release:mesos.fetcher.FetcherInfo.cache_directory)
  clear_has_cache_directory();
  return cache_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetcherInfo::set_allocated_cache_directory(::std::string* cache_directory) {
  if (cache_directory != NULL) {
    set_has_cache_directory();
  } else {
    clear_has_cache_directory();
  }
  cache_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cache_directory);
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.cache_directory)
}

// repeated .mesos.fetcher.FetcherInfo.Item items = 3;
inline int FetcherInfo::items_size() const {
  return items_.size();
}
inline void FetcherInfo::clear_items() {
  items_.Clear();
}
inline const ::mesos::fetcher::FetcherInfo_Item& FetcherInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.items)
  return items_.Get(index);
}
inline ::mesos::fetcher::FetcherInfo_Item* FetcherInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.items)
  return items_.Mutable(index);
}
inline ::mesos::fetcher::FetcherInfo_Item* FetcherInfo::add_items() {
  // @@protoc_insertion_point(field_add:mesos.fetcher.FetcherInfo.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::fetcher::FetcherInfo_Item >*
FetcherInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:mesos.fetcher.FetcherInfo.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::fetcher::FetcherInfo_Item >&
FetcherInfo::items() const {
  // @@protoc_insertion_point(field_list:mesos.fetcher.FetcherInfo.items)
  return items_;
}

// optional string user = 4;
inline bool FetcherInfo::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FetcherInfo::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FetcherInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FetcherInfo::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& FetcherInfo::user() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.user)
  return user_.GetNoArena();
}
inline void FetcherInfo::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.fetcher.FetcherInfo.user)
}
#if LANG_CXX11
inline void FetcherInfo::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.fetcher.FetcherInfo.user)
}
#endif
inline void FetcherInfo::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.fetcher.FetcherInfo.user)
}
inline void FetcherInfo::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.fetcher.FetcherInfo.user)
}
inline ::std::string* FetcherInfo::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetcherInfo::release_user() {
  // @@protoc_insertion_point(field_release:mesos.fetcher.FetcherInfo.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetcherInfo::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.user)
}

// optional string frameworks_home = 5;
inline bool FetcherInfo::has_frameworks_home() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FetcherInfo::set_has_frameworks_home() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FetcherInfo::clear_has_frameworks_home() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FetcherInfo::clear_frameworks_home() {
  frameworks_home_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frameworks_home();
}
inline const ::std::string& FetcherInfo::frameworks_home() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.frameworks_home)
  return frameworks_home_.GetNoArena();
}
inline void FetcherInfo::set_frameworks_home(const ::std::string& value) {
  set_has_frameworks_home();
  frameworks_home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.fetcher.FetcherInfo.frameworks_home)
}
#if LANG_CXX11
inline void FetcherInfo::set_frameworks_home(::std::string&& value) {
  set_has_frameworks_home();
  frameworks_home_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.fetcher.FetcherInfo.frameworks_home)
}
#endif
inline void FetcherInfo::set_frameworks_home(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frameworks_home();
  frameworks_home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.fetcher.FetcherInfo.frameworks_home)
}
inline void FetcherInfo::set_frameworks_home(const char* value, size_t size) {
  set_has_frameworks_home();
  frameworks_home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.fetcher.FetcherInfo.frameworks_home)
}
inline ::std::string* FetcherInfo::mutable_frameworks_home() {
  set_has_frameworks_home();
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.frameworks_home)
  return frameworks_home_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FetcherInfo::release_frameworks_home() {
  // @@protoc_insertion_point(field_release:mesos.fetcher.FetcherInfo.frameworks_home)
  clear_has_frameworks_home();
  return frameworks_home_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FetcherInfo::set_allocated_frameworks_home(::std::string* frameworks_home) {
  if (frameworks_home != NULL) {
    set_has_frameworks_home();
  } else {
    clear_has_frameworks_home();
  }
  frameworks_home_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frameworks_home);
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.frameworks_home)
}

// optional .mesos.DurationInfo stall_timeout = 6;
inline bool FetcherInfo::has_stall_timeout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FetcherInfo::set_has_stall_timeout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FetcherInfo::clear_has_stall_timeout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mesos::DurationInfo& FetcherInfo::stall_timeout() const {
  const ::mesos::DurationInfo* p = stall_timeout_;
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.stall_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::DurationInfo*>(
      &::mesos::_DurationInfo_default_instance_);
}
inline ::mesos::DurationInfo* FetcherInfo::release_stall_timeout() {
  // @@protoc_insertion_point(field_release:mesos.fetcher.FetcherInfo.stall_timeout)
  clear_has_stall_timeout();
  ::mesos::DurationInfo* temp = stall_timeout_;
  stall_timeout_ = NULL;
  return temp;
}
inline ::mesos::DurationInfo* FetcherInfo::mutable_stall_timeout() {
  set_has_stall_timeout();
  if (stall_timeout_ == NULL) {
    stall_timeout_ = new ::mesos::DurationInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.stall_timeout)
  return stall_timeout_;
}
inline void FetcherInfo::set_allocated_stall_timeout(::mesos::DurationInfo* stall_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stall_timeout_);
  }
  if (stall_timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(stall_timeout)->GetArena();
    if (message_arena != submessage_arena) {
      stall_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stall_timeout, submessage_arena);
    }
    set_has_stall_timeout();
  } else {
    clear_has_stall_timeout();
  }
  stall_timeout_ = stall_timeout;
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.stall_timeout)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fetcher
}  // namespace mesos

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mesos::fetcher::FetcherInfo_Item_Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::fetcher::FetcherInfo_Item_Action>() {
  return ::mesos::fetcher::FetcherInfo_Item_Action_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2ffetcher_2ffetcher_2eproto__INCLUDED

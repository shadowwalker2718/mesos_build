// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/authorizer/authorizer.proto

#ifndef PROTOBUF_mesos_2fauthorizer_2fauthorizer_2eproto__INCLUDED
#define PROTOBUF_mesos_2fauthorizer_2fauthorizer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos/mesos.pb.h"
#include "mesos/quota/quota.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_mesos_2fauthorizer_2fauthorizer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSubjectImpl();
void InitDefaultsSubject();
void InitDefaultsObjectImpl();
void InitDefaultsObject();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
inline void InitDefaults() {
  InitDefaultsSubject();
  InitDefaultsObject();
  InitDefaultsRequest();
}
}  // namespace protobuf_mesos_2fauthorizer_2fauthorizer_2eproto
namespace mesos {
namespace authorization {
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Subject;
class SubjectDefaultTypeInternal;
extern SubjectDefaultTypeInternal _Subject_default_instance_;
}  // namespace authorization
}  // namespace mesos
namespace mesos {
namespace authorization {

enum Action {
  UNKNOWN = 0,
  REGISTER_FRAMEWORK = 1,
  REGISTER_FRAMEWORK_WITH_ROLE = 1,
  RUN_TASK = 2,
  TEARDOWN_FRAMEWORK = 3,
  TEARDOWN_FRAMEWORK_WITH_PRINCIPAL = 3,
  RESERVE_RESOURCES = 4,
  RESERVE_RESOURCES_WITH_ROLE = 4,
  UNRESERVE_RESOURCES = 5,
  UNRESERVE_RESOURCES_WITH_PRINCIPAL = 5,
  CREATE_VOLUME = 6,
  CREATE_VOLUME_WITH_ROLE = 6,
  DESTROY_VOLUME = 7,
  DESTROY_VOLUME_WITH_PRINCIPAL = 7,
  GET_ENDPOINT_WITH_PATH = 8,
  VIEW_ROLE = 9,
  UPDATE_WEIGHT = 10,
  UPDATE_WEIGHT_WITH_ROLE = 10,
  GET_QUOTA = 11,
  GET_QUOTA_WITH_ROLE = 11,
  UPDATE_QUOTA = 12,
  VIEW_FRAMEWORK = 13,
  VIEW_TASK = 14,
  VIEW_EXECUTOR = 15,
  ACCESS_SANDBOX = 16,
  ACCESS_MESOS_LOG = 17,
  VIEW_FLAGS = 18,
  LAUNCH_NESTED_CONTAINER = 19,
  KILL_NESTED_CONTAINER = 20,
  WAIT_NESTED_CONTAINER = 21,
  LAUNCH_NESTED_CONTAINER_SESSION = 22,
  ATTACH_CONTAINER_INPUT = 23,
  ATTACH_CONTAINER_OUTPUT = 24,
  VIEW_CONTAINER = 25,
  SET_LOG_LEVEL = 26,
  REMOVE_NESTED_CONTAINER = 27,
  REGISTER_AGENT = 28,
  UPDATE_MAINTENANCE_SCHEDULE = 29,
  GET_MAINTENANCE_SCHEDULE = 30,
  START_MAINTENANCE = 31,
  STOP_MAINTENANCE = 32,
  GET_MAINTENANCE_STATUS = 33,
  MARK_AGENT_GONE = 34,
  LAUNCH_STANDALONE_CONTAINER = 35,
  KILL_STANDALONE_CONTAINER = 36,
  WAIT_STANDALONE_CONTAINER = 37,
  REMOVE_STANDALONE_CONTAINER = 38,
  VIEW_STANDALONE_CONTAINER = 40,
  MODIFY_RESOURCE_PROVIDER_CONFIG = 39,
  PRUNE_IMAGES = 41,
  RESIZE_VOLUME = 42
};
bool Action_IsValid(int value);
const Action Action_MIN = UNKNOWN;
const Action Action_MAX = RESIZE_VOLUME;
const int Action_ARRAYSIZE = Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Action_descriptor();
inline const ::std::string& Action_Name(Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Action_descriptor(), value);
}
inline bool Action_Parse(
    const ::std::string& name, Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Action>(
    Action_descriptor(), name, value);
}
// ===================================================================

class Subject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.authorization.Subject) */ {
 public:
  Subject();
  virtual ~Subject();

  Subject(const Subject& from);

  inline Subject& operator=(const Subject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Subject(Subject&& from) noexcept
    : Subject() {
    *this = ::std::move(from);
  }

  inline Subject& operator=(Subject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subject* internal_default_instance() {
    return reinterpret_cast<const Subject*>(
               &_Subject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Subject* other);
  friend void swap(Subject& a, Subject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Subject* New() const PROTOBUF_FINAL { return New(NULL); }

  Subject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Subject& from);
  void MergeFrom(const Subject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Subject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional .mesos.Labels claims = 2;
  bool has_claims() const;
  void clear_claims();
  static const int kClaimsFieldNumber = 2;
  const ::mesos::Labels& claims() const;
  ::mesos::Labels* release_claims();
  ::mesos::Labels* mutable_claims();
  void set_allocated_claims(::mesos::Labels* claims);

  // @@protoc_insertion_point(class_scope:mesos.authorization.Subject)
 private:
  void set_has_value();
  void clear_has_value();
  void set_has_claims();
  void clear_has_claims();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::mesos::Labels* claims_;
  friend struct ::protobuf_mesos_2fauthorizer_2fauthorizer_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fauthorizer_2fauthorizer_2eproto::InitDefaultsSubjectImpl();
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.authorization.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Object* other);
  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const PROTOBUF_FINAL { return New(NULL); }

  Object* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional .mesos.FrameworkInfo framework_info = 2;
  bool has_framework_info() const;
  void clear_framework_info();
  static const int kFrameworkInfoFieldNumber = 2;
  const ::mesos::FrameworkInfo& framework_info() const;
  ::mesos::FrameworkInfo* release_framework_info();
  ::mesos::FrameworkInfo* mutable_framework_info();
  void set_allocated_framework_info(::mesos::FrameworkInfo* framework_info);

  // optional .mesos.Task task = 3;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 3;
  const ::mesos::Task& task() const;
  ::mesos::Task* release_task();
  ::mesos::Task* mutable_task();
  void set_allocated_task(::mesos::Task* task);

  // optional .mesos.TaskInfo task_info = 4;
  bool has_task_info() const;
  void clear_task_info();
  static const int kTaskInfoFieldNumber = 4;
  const ::mesos::TaskInfo& task_info() const;
  ::mesos::TaskInfo* release_task_info();
  ::mesos::TaskInfo* mutable_task_info();
  void set_allocated_task_info(::mesos::TaskInfo* task_info);

  // optional .mesos.ExecutorInfo executor_info = 5;
  bool has_executor_info() const;
  void clear_executor_info();
  static const int kExecutorInfoFieldNumber = 5;
  const ::mesos::ExecutorInfo& executor_info() const;
  ::mesos::ExecutorInfo* release_executor_info();
  ::mesos::ExecutorInfo* mutable_executor_info();
  void set_allocated_executor_info(::mesos::ExecutorInfo* executor_info);

  // optional .mesos.quota.QuotaInfo quota_info = 6;
  bool has_quota_info() const;
  void clear_quota_info();
  static const int kQuotaInfoFieldNumber = 6;
  const ::mesos::quota::QuotaInfo& quota_info() const;
  ::mesos::quota::QuotaInfo* release_quota_info();
  ::mesos::quota::QuotaInfo* mutable_quota_info();
  void set_allocated_quota_info(::mesos::quota::QuotaInfo* quota_info);

  // optional .mesos.WeightInfo weight_info = 7;
  bool has_weight_info() const;
  void clear_weight_info();
  static const int kWeightInfoFieldNumber = 7;
  const ::mesos::WeightInfo& weight_info() const;
  ::mesos::WeightInfo* release_weight_info();
  ::mesos::WeightInfo* mutable_weight_info();
  void set_allocated_weight_info(::mesos::WeightInfo* weight_info);

  // optional .mesos.Resource resource = 8;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 8;
  const ::mesos::Resource& resource() const;
  ::mesos::Resource* release_resource();
  ::mesos::Resource* mutable_resource();
  void set_allocated_resource(::mesos::Resource* resource);

  // optional .mesos.CommandInfo command_info = 9;
  bool has_command_info() const;
  void clear_command_info();
  static const int kCommandInfoFieldNumber = 9;
  const ::mesos::CommandInfo& command_info() const;
  ::mesos::CommandInfo* release_command_info();
  ::mesos::CommandInfo* mutable_command_info();
  void set_allocated_command_info(::mesos::CommandInfo* command_info);

  // optional .mesos.ContainerID container_id = 10;
  bool has_container_id() const;
  void clear_container_id();
  static const int kContainerIdFieldNumber = 10;
  const ::mesos::ContainerID& container_id() const;
  ::mesos::ContainerID* release_container_id();
  ::mesos::ContainerID* mutable_container_id();
  void set_allocated_container_id(::mesos::ContainerID* container_id);

  // optional .mesos.MachineID machine_id = 11;
  bool has_machine_id() const;
  void clear_machine_id();
  static const int kMachineIdFieldNumber = 11;
  const ::mesos::MachineID& machine_id() const;
  ::mesos::MachineID* release_machine_id();
  ::mesos::MachineID* mutable_machine_id();
  void set_allocated_machine_id(::mesos::MachineID* machine_id);

  // @@protoc_insertion_point(class_scope:mesos.authorization.Object)
 private:
  void set_has_value();
  void clear_has_value();
  void set_has_framework_info();
  void clear_has_framework_info();
  void set_has_task();
  void clear_has_task();
  void set_has_task_info();
  void clear_has_task_info();
  void set_has_executor_info();
  void clear_has_executor_info();
  void set_has_quota_info();
  void clear_has_quota_info();
  void set_has_weight_info();
  void clear_has_weight_info();
  void set_has_resource();
  void clear_has_resource();
  void set_has_command_info();
  void clear_has_command_info();
  void set_has_container_id();
  void clear_has_container_id();
  void set_has_machine_id();
  void clear_has_machine_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::mesos::FrameworkInfo* framework_info_;
  ::mesos::Task* task_;
  ::mesos::TaskInfo* task_info_;
  ::mesos::ExecutorInfo* executor_info_;
  ::mesos::quota::QuotaInfo* quota_info_;
  ::mesos::WeightInfo* weight_info_;
  ::mesos::Resource* resource_;
  ::mesos::CommandInfo* command_info_;
  ::mesos::ContainerID* container_id_;
  ::mesos::MachineID* machine_id_;
  friend struct ::protobuf_mesos_2fauthorizer_2fauthorizer_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fauthorizer_2fauthorizer_2eproto::InitDefaultsObjectImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.authorization.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mesos.authorization.Subject subject = 1;
  bool has_subject() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::mesos::authorization::Subject& subject() const;
  ::mesos::authorization::Subject* release_subject();
  ::mesos::authorization::Subject* mutable_subject();
  void set_allocated_subject(::mesos::authorization::Subject* subject);

  // optional .mesos.authorization.Object object = 3;
  bool has_object() const;
  void clear_object();
  static const int kObjectFieldNumber = 3;
  const ::mesos::authorization::Object& object() const;
  ::mesos::authorization::Object* release_object();
  ::mesos::authorization::Object* mutable_object();
  void set_allocated_object(::mesos::authorization::Object* object);

  // optional .mesos.authorization.Action action = 2;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::mesos::authorization::Action action() const;
  void set_action(::mesos::authorization::Action value);

  // @@protoc_insertion_point(class_scope:mesos.authorization.Request)
 private:
  void set_has_subject();
  void clear_has_subject();
  void set_has_action();
  void clear_has_action();
  void set_has_object();
  void clear_has_object();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::authorization::Subject* subject_;
  ::mesos::authorization::Object* object_;
  int action_;
  friend struct ::protobuf_mesos_2fauthorizer_2fauthorizer_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fauthorizer_2fauthorizer_2eproto::InitDefaultsRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Subject

// optional string value = 1;
inline bool Subject::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subject::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Subject::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Subject::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Subject::value() const {
  // @@protoc_insertion_point(field_get:mesos.authorization.Subject.value)
  return value_.GetNoArena();
}
inline void Subject::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.authorization.Subject.value)
}
#if LANG_CXX11
inline void Subject::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.authorization.Subject.value)
}
#endif
inline void Subject::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.authorization.Subject.value)
}
inline void Subject::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.authorization.Subject.value)
}
inline ::std::string* Subject::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Subject.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subject::release_value() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Subject.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subject::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Subject.value)
}

// optional .mesos.Labels claims = 2;
inline bool Subject::has_claims() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Subject::set_has_claims() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Subject::clear_has_claims() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mesos::Labels& Subject::claims() const {
  const ::mesos::Labels* p = claims_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Subject.claims)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::Labels*>(
      &::mesos::_Labels_default_instance_);
}
inline ::mesos::Labels* Subject::release_claims() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Subject.claims)
  clear_has_claims();
  ::mesos::Labels* temp = claims_;
  claims_ = NULL;
  return temp;
}
inline ::mesos::Labels* Subject::mutable_claims() {
  set_has_claims();
  if (claims_ == NULL) {
    claims_ = new ::mesos::Labels;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Subject.claims)
  return claims_;
}
inline void Subject::set_allocated_claims(::mesos::Labels* claims) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(claims_);
  }
  if (claims) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(claims)->GetArena();
    if (message_arena != submessage_arena) {
      claims = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, claims, submessage_arena);
    }
    set_has_claims();
  } else {
    clear_has_claims();
  }
  claims_ = claims;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Subject.claims)
}

// -------------------------------------------------------------------

// Object

// optional string value = 1;
inline bool Object::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Object::value() const {
  // @@protoc_insertion_point(field_get:mesos.authorization.Object.value)
  return value_.GetNoArena();
}
inline void Object::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.authorization.Object.value)
}
#if LANG_CXX11
inline void Object::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.authorization.Object.value)
}
#endif
inline void Object::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.authorization.Object.value)
}
inline void Object::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.authorization.Object.value)
}
inline ::std::string* Object::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Object.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_value() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Object.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Object.value)
}

// optional .mesos.FrameworkInfo framework_info = 2;
inline bool Object::has_framework_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object::set_has_framework_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object::clear_has_framework_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mesos::FrameworkInfo& Object::framework_info() const {
  const ::mesos::FrameworkInfo* p = framework_info_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Object.framework_info)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::FrameworkInfo*>(
      &::mesos::_FrameworkInfo_default_instance_);
}
inline ::mesos::FrameworkInfo* Object::release_framework_info() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Object.framework_info)
  clear_has_framework_info();
  ::mesos::FrameworkInfo* temp = framework_info_;
  framework_info_ = NULL;
  return temp;
}
inline ::mesos::FrameworkInfo* Object::mutable_framework_info() {
  set_has_framework_info();
  if (framework_info_ == NULL) {
    framework_info_ = new ::mesos::FrameworkInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Object.framework_info)
  return framework_info_;
}
inline void Object::set_allocated_framework_info(::mesos::FrameworkInfo* framework_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(framework_info_);
  }
  if (framework_info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(framework_info)->GetArena();
    if (message_arena != submessage_arena) {
      framework_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, framework_info, submessage_arena);
    }
    set_has_framework_info();
  } else {
    clear_has_framework_info();
  }
  framework_info_ = framework_info;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Object.framework_info)
}

// optional .mesos.Task task = 3;
inline bool Object::has_task() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Object::set_has_task() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Object::clear_has_task() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mesos::Task& Object::task() const {
  const ::mesos::Task* p = task_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Object.task)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::Task*>(
      &::mesos::_Task_default_instance_);
}
inline ::mesos::Task* Object::release_task() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Object.task)
  clear_has_task();
  ::mesos::Task* temp = task_;
  task_ = NULL;
  return temp;
}
inline ::mesos::Task* Object::mutable_task() {
  set_has_task();
  if (task_ == NULL) {
    task_ = new ::mesos::Task;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Object.task)
  return task_;
}
inline void Object::set_allocated_task(::mesos::Task* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_);
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(task)->GetArena();
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    set_has_task();
  } else {
    clear_has_task();
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Object.task)
}

// optional .mesos.TaskInfo task_info = 4;
inline bool Object::has_task_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Object::set_has_task_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Object::clear_has_task_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mesos::TaskInfo& Object::task_info() const {
  const ::mesos::TaskInfo* p = task_info_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Object.task_info)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::TaskInfo*>(
      &::mesos::_TaskInfo_default_instance_);
}
inline ::mesos::TaskInfo* Object::release_task_info() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Object.task_info)
  clear_has_task_info();
  ::mesos::TaskInfo* temp = task_info_;
  task_info_ = NULL;
  return temp;
}
inline ::mesos::TaskInfo* Object::mutable_task_info() {
  set_has_task_info();
  if (task_info_ == NULL) {
    task_info_ = new ::mesos::TaskInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Object.task_info)
  return task_info_;
}
inline void Object::set_allocated_task_info(::mesos::TaskInfo* task_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_info_);
  }
  if (task_info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(task_info)->GetArena();
    if (message_arena != submessage_arena) {
      task_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_info, submessage_arena);
    }
    set_has_task_info();
  } else {
    clear_has_task_info();
  }
  task_info_ = task_info;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Object.task_info)
}

// optional .mesos.ExecutorInfo executor_info = 5;
inline bool Object::has_executor_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Object::set_has_executor_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Object::clear_has_executor_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mesos::ExecutorInfo& Object::executor_info() const {
  const ::mesos::ExecutorInfo* p = executor_info_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Object.executor_info)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::ExecutorInfo*>(
      &::mesos::_ExecutorInfo_default_instance_);
}
inline ::mesos::ExecutorInfo* Object::release_executor_info() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Object.executor_info)
  clear_has_executor_info();
  ::mesos::ExecutorInfo* temp = executor_info_;
  executor_info_ = NULL;
  return temp;
}
inline ::mesos::ExecutorInfo* Object::mutable_executor_info() {
  set_has_executor_info();
  if (executor_info_ == NULL) {
    executor_info_ = new ::mesos::ExecutorInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Object.executor_info)
  return executor_info_;
}
inline void Object::set_allocated_executor_info(::mesos::ExecutorInfo* executor_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(executor_info_);
  }
  if (executor_info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(executor_info)->GetArena();
    if (message_arena != submessage_arena) {
      executor_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, executor_info, submessage_arena);
    }
    set_has_executor_info();
  } else {
    clear_has_executor_info();
  }
  executor_info_ = executor_info;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Object.executor_info)
}

// optional .mesos.quota.QuotaInfo quota_info = 6;
inline bool Object::has_quota_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Object::set_has_quota_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Object::clear_has_quota_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mesos::quota::QuotaInfo& Object::quota_info() const {
  const ::mesos::quota::QuotaInfo* p = quota_info_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Object.quota_info)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::quota::QuotaInfo*>(
      &::mesos::quota::_QuotaInfo_default_instance_);
}
inline ::mesos::quota::QuotaInfo* Object::release_quota_info() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Object.quota_info)
  clear_has_quota_info();
  ::mesos::quota::QuotaInfo* temp = quota_info_;
  quota_info_ = NULL;
  return temp;
}
inline ::mesos::quota::QuotaInfo* Object::mutable_quota_info() {
  set_has_quota_info();
  if (quota_info_ == NULL) {
    quota_info_ = new ::mesos::quota::QuotaInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Object.quota_info)
  return quota_info_;
}
inline void Object::set_allocated_quota_info(::mesos::quota::QuotaInfo* quota_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quota_info_);
  }
  if (quota_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quota_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quota_info, submessage_arena);
    }
    set_has_quota_info();
  } else {
    clear_has_quota_info();
  }
  quota_info_ = quota_info;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Object.quota_info)
}

// optional .mesos.WeightInfo weight_info = 7;
inline bool Object::has_weight_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Object::set_has_weight_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Object::clear_has_weight_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mesos::WeightInfo& Object::weight_info() const {
  const ::mesos::WeightInfo* p = weight_info_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Object.weight_info)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::WeightInfo*>(
      &::mesos::_WeightInfo_default_instance_);
}
inline ::mesos::WeightInfo* Object::release_weight_info() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Object.weight_info)
  clear_has_weight_info();
  ::mesos::WeightInfo* temp = weight_info_;
  weight_info_ = NULL;
  return temp;
}
inline ::mesos::WeightInfo* Object::mutable_weight_info() {
  set_has_weight_info();
  if (weight_info_ == NULL) {
    weight_info_ = new ::mesos::WeightInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Object.weight_info)
  return weight_info_;
}
inline void Object::set_allocated_weight_info(::mesos::WeightInfo* weight_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(weight_info_);
  }
  if (weight_info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(weight_info)->GetArena();
    if (message_arena != submessage_arena) {
      weight_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_info, submessage_arena);
    }
    set_has_weight_info();
  } else {
    clear_has_weight_info();
  }
  weight_info_ = weight_info;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Object.weight_info)
}

// optional .mesos.Resource resource = 8;
inline bool Object::has_resource() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Object::set_has_resource() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Object::clear_has_resource() {
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mesos::Resource& Object::resource() const {
  const ::mesos::Resource* p = resource_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Object.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::Resource*>(
      &::mesos::_Resource_default_instance_);
}
inline ::mesos::Resource* Object::release_resource() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Object.resource)
  clear_has_resource();
  ::mesos::Resource* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::mesos::Resource* Object::mutable_resource() {
  set_has_resource();
  if (resource_ == NULL) {
    resource_ = new ::mesos::Resource;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Object.resource)
  return resource_;
}
inline void Object::set_allocated_resource(::mesos::Resource* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resource_);
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(resource)->GetArena();
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    set_has_resource();
  } else {
    clear_has_resource();
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Object.resource)
}

// optional .mesos.CommandInfo command_info = 9;
inline bool Object::has_command_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Object::set_has_command_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Object::clear_has_command_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::mesos::CommandInfo& Object::command_info() const {
  const ::mesos::CommandInfo* p = command_info_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Object.command_info)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::CommandInfo*>(
      &::mesos::_CommandInfo_default_instance_);
}
inline ::mesos::CommandInfo* Object::release_command_info() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Object.command_info)
  clear_has_command_info();
  ::mesos::CommandInfo* temp = command_info_;
  command_info_ = NULL;
  return temp;
}
inline ::mesos::CommandInfo* Object::mutable_command_info() {
  set_has_command_info();
  if (command_info_ == NULL) {
    command_info_ = new ::mesos::CommandInfo;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Object.command_info)
  return command_info_;
}
inline void Object::set_allocated_command_info(::mesos::CommandInfo* command_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(command_info_);
  }
  if (command_info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(command_info)->GetArena();
    if (message_arena != submessage_arena) {
      command_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, command_info, submessage_arena);
    }
    set_has_command_info();
  } else {
    clear_has_command_info();
  }
  command_info_ = command_info;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Object.command_info)
}

// optional .mesos.ContainerID container_id = 10;
inline bool Object::has_container_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Object::set_has_container_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Object::clear_has_container_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::mesos::ContainerID& Object::container_id() const {
  const ::mesos::ContainerID* p = container_id_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Object.container_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::ContainerID*>(
      &::mesos::_ContainerID_default_instance_);
}
inline ::mesos::ContainerID* Object::release_container_id() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Object.container_id)
  clear_has_container_id();
  ::mesos::ContainerID* temp = container_id_;
  container_id_ = NULL;
  return temp;
}
inline ::mesos::ContainerID* Object::mutable_container_id() {
  set_has_container_id();
  if (container_id_ == NULL) {
    container_id_ = new ::mesos::ContainerID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Object.container_id)
  return container_id_;
}
inline void Object::set_allocated_container_id(::mesos::ContainerID* container_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(container_id_);
  }
  if (container_id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(container_id)->GetArena();
    if (message_arena != submessage_arena) {
      container_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, container_id, submessage_arena);
    }
    set_has_container_id();
  } else {
    clear_has_container_id();
  }
  container_id_ = container_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Object.container_id)
}

// optional .mesos.MachineID machine_id = 11;
inline bool Object::has_machine_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Object::set_has_machine_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Object::clear_has_machine_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::mesos::MachineID& Object::machine_id() const {
  const ::mesos::MachineID* p = machine_id_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Object.machine_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::MachineID*>(
      &::mesos::_MachineID_default_instance_);
}
inline ::mesos::MachineID* Object::release_machine_id() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Object.machine_id)
  clear_has_machine_id();
  ::mesos::MachineID* temp = machine_id_;
  machine_id_ = NULL;
  return temp;
}
inline ::mesos::MachineID* Object::mutable_machine_id() {
  set_has_machine_id();
  if (machine_id_ == NULL) {
    machine_id_ = new ::mesos::MachineID;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Object.machine_id)
  return machine_id_;
}
inline void Object::set_allocated_machine_id(::mesos::MachineID* machine_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(machine_id_);
  }
  if (machine_id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(machine_id)->GetArena();
    if (message_arena != submessage_arena) {
      machine_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, machine_id, submessage_arena);
    }
    set_has_machine_id();
  } else {
    clear_has_machine_id();
  }
  machine_id_ = machine_id;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Object.machine_id)
}

// -------------------------------------------------------------------

// Request

// optional .mesos.authorization.Subject subject = 1;
inline bool Request::has_subject() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_subject() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_subject() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_subject() {
  if (subject_ != NULL) subject_->Clear();
  clear_has_subject();
}
inline const ::mesos::authorization::Subject& Request::subject() const {
  const ::mesos::authorization::Subject* p = subject_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Request.subject)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::authorization::Subject*>(
      &::mesos::authorization::_Subject_default_instance_);
}
inline ::mesos::authorization::Subject* Request::release_subject() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Request.subject)
  clear_has_subject();
  ::mesos::authorization::Subject* temp = subject_;
  subject_ = NULL;
  return temp;
}
inline ::mesos::authorization::Subject* Request::mutable_subject() {
  set_has_subject();
  if (subject_ == NULL) {
    subject_ = new ::mesos::authorization::Subject;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Request.subject)
  return subject_;
}
inline void Request::set_allocated_subject(::mesos::authorization::Subject* subject) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete subject_;
  }
  if (subject) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subject = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    set_has_subject();
  } else {
    clear_has_subject();
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Request.subject)
}

// optional .mesos.authorization.Action action = 2;
inline bool Request::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::mesos::authorization::Action Request::action() const {
  // @@protoc_insertion_point(field_get:mesos.authorization.Request.action)
  return static_cast< ::mesos::authorization::Action >(action_);
}
inline void Request::set_action(::mesos::authorization::Action value) {
  assert(::mesos::authorization::Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:mesos.authorization.Request.action)
}

// optional .mesos.authorization.Object object = 3;
inline bool Request::has_object() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_object() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_object() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_object() {
  if (object_ != NULL) object_->Clear();
  clear_has_object();
}
inline const ::mesos::authorization::Object& Request::object() const {
  const ::mesos::authorization::Object* p = object_;
  // @@protoc_insertion_point(field_get:mesos.authorization.Request.object)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::authorization::Object*>(
      &::mesos::authorization::_Object_default_instance_);
}
inline ::mesos::authorization::Object* Request::release_object() {
  // @@protoc_insertion_point(field_release:mesos.authorization.Request.object)
  clear_has_object();
  ::mesos::authorization::Object* temp = object_;
  object_ = NULL;
  return temp;
}
inline ::mesos::authorization::Object* Request::mutable_object() {
  set_has_object();
  if (object_ == NULL) {
    object_ = new ::mesos::authorization::Object;
  }
  // @@protoc_insertion_point(field_mutable:mesos.authorization.Request.object)
  return object_;
}
inline void Request::set_allocated_object(::mesos::authorization::Object* object) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete object_;
  }
  if (object) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      object = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    set_has_object();
  } else {
    clear_has_object();
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:mesos.authorization.Request.object)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace authorization
}  // namespace mesos

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mesos::authorization::Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::authorization::Action>() {
  return ::mesos::authorization::Action_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2fauthorizer_2fauthorizer_2eproto__INCLUDED

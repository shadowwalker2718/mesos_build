// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/module/hook.proto

#ifndef PROTOBUF_mesos_2fmodule_2fhook_2eproto__INCLUDED
#define PROTOBUF_mesos_2fmodule_2fhook_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mesos/mesos.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_mesos_2fmodule_2fhook_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDockerTaskExecutorPrepareInfoImpl();
void InitDefaultsDockerTaskExecutorPrepareInfo();
inline void InitDefaults() {
  InitDefaultsDockerTaskExecutorPrepareInfo();
}
}  // namespace protobuf_mesos_2fmodule_2fhook_2eproto
namespace mesos {
class DockerTaskExecutorPrepareInfo;
class DockerTaskExecutorPrepareInfoDefaultTypeInternal;
extern DockerTaskExecutorPrepareInfoDefaultTypeInternal _DockerTaskExecutorPrepareInfo_default_instance_;
}  // namespace mesos
namespace mesos {

// ===================================================================

class DockerTaskExecutorPrepareInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.DockerTaskExecutorPrepareInfo) */ {
 public:
  DockerTaskExecutorPrepareInfo();
  virtual ~DockerTaskExecutorPrepareInfo();

  DockerTaskExecutorPrepareInfo(const DockerTaskExecutorPrepareInfo& from);

  inline DockerTaskExecutorPrepareInfo& operator=(const DockerTaskExecutorPrepareInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DockerTaskExecutorPrepareInfo(DockerTaskExecutorPrepareInfo&& from) noexcept
    : DockerTaskExecutorPrepareInfo() {
    *this = ::std::move(from);
  }

  inline DockerTaskExecutorPrepareInfo& operator=(DockerTaskExecutorPrepareInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DockerTaskExecutorPrepareInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DockerTaskExecutorPrepareInfo* internal_default_instance() {
    return reinterpret_cast<const DockerTaskExecutorPrepareInfo*>(
               &_DockerTaskExecutorPrepareInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DockerTaskExecutorPrepareInfo* other);
  friend void swap(DockerTaskExecutorPrepareInfo& a, DockerTaskExecutorPrepareInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DockerTaskExecutorPrepareInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DockerTaskExecutorPrepareInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DockerTaskExecutorPrepareInfo& from);
  void MergeFrom(const DockerTaskExecutorPrepareInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DockerTaskExecutorPrepareInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mesos.Environment executorEnvironment = 1;
  bool has_executorenvironment() const;
  void clear_executorenvironment();
  static const int kExecutorEnvironmentFieldNumber = 1;
  const ::mesos::Environment& executorenvironment() const;
  ::mesos::Environment* release_executorenvironment();
  ::mesos::Environment* mutable_executorenvironment();
  void set_allocated_executorenvironment(::mesos::Environment* executorenvironment);

  // optional .mesos.Environment taskEnvironment = 2;
  bool has_taskenvironment() const;
  void clear_taskenvironment();
  static const int kTaskEnvironmentFieldNumber = 2;
  const ::mesos::Environment& taskenvironment() const;
  ::mesos::Environment* release_taskenvironment();
  ::mesos::Environment* mutable_taskenvironment();
  void set_allocated_taskenvironment(::mesos::Environment* taskenvironment);

  // @@protoc_insertion_point(class_scope:mesos.DockerTaskExecutorPrepareInfo)
 private:
  void set_has_executorenvironment();
  void clear_has_executorenvironment();
  void set_has_taskenvironment();
  void clear_has_taskenvironment();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::mesos::Environment* executorenvironment_;
  ::mesos::Environment* taskenvironment_;
  friend struct ::protobuf_mesos_2fmodule_2fhook_2eproto::TableStruct;
  friend void ::protobuf_mesos_2fmodule_2fhook_2eproto::InitDefaultsDockerTaskExecutorPrepareInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DockerTaskExecutorPrepareInfo

// optional .mesos.Environment executorEnvironment = 1;
inline bool DockerTaskExecutorPrepareInfo::has_executorenvironment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DockerTaskExecutorPrepareInfo::set_has_executorenvironment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DockerTaskExecutorPrepareInfo::clear_has_executorenvironment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mesos::Environment& DockerTaskExecutorPrepareInfo::executorenvironment() const {
  const ::mesos::Environment* p = executorenvironment_;
  // @@protoc_insertion_point(field_get:mesos.DockerTaskExecutorPrepareInfo.executorEnvironment)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::Environment*>(
      &::mesos::_Environment_default_instance_);
}
inline ::mesos::Environment* DockerTaskExecutorPrepareInfo::release_executorenvironment() {
  // @@protoc_insertion_point(field_release:mesos.DockerTaskExecutorPrepareInfo.executorEnvironment)
  clear_has_executorenvironment();
  ::mesos::Environment* temp = executorenvironment_;
  executorenvironment_ = NULL;
  return temp;
}
inline ::mesos::Environment* DockerTaskExecutorPrepareInfo::mutable_executorenvironment() {
  set_has_executorenvironment();
  if (executorenvironment_ == NULL) {
    executorenvironment_ = new ::mesos::Environment;
  }
  // @@protoc_insertion_point(field_mutable:mesos.DockerTaskExecutorPrepareInfo.executorEnvironment)
  return executorenvironment_;
}
inline void DockerTaskExecutorPrepareInfo::set_allocated_executorenvironment(::mesos::Environment* executorenvironment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(executorenvironment_);
  }
  if (executorenvironment) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(executorenvironment)->GetArena();
    if (message_arena != submessage_arena) {
      executorenvironment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, executorenvironment, submessage_arena);
    }
    set_has_executorenvironment();
  } else {
    clear_has_executorenvironment();
  }
  executorenvironment_ = executorenvironment;
  // @@protoc_insertion_point(field_set_allocated:mesos.DockerTaskExecutorPrepareInfo.executorEnvironment)
}

// optional .mesos.Environment taskEnvironment = 2;
inline bool DockerTaskExecutorPrepareInfo::has_taskenvironment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DockerTaskExecutorPrepareInfo::set_has_taskenvironment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DockerTaskExecutorPrepareInfo::clear_has_taskenvironment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mesos::Environment& DockerTaskExecutorPrepareInfo::taskenvironment() const {
  const ::mesos::Environment* p = taskenvironment_;
  // @@protoc_insertion_point(field_get:mesos.DockerTaskExecutorPrepareInfo.taskEnvironment)
  return p != NULL ? *p : *reinterpret_cast<const ::mesos::Environment*>(
      &::mesos::_Environment_default_instance_);
}
inline ::mesos::Environment* DockerTaskExecutorPrepareInfo::release_taskenvironment() {
  // @@protoc_insertion_point(field_release:mesos.DockerTaskExecutorPrepareInfo.taskEnvironment)
  clear_has_taskenvironment();
  ::mesos::Environment* temp = taskenvironment_;
  taskenvironment_ = NULL;
  return temp;
}
inline ::mesos::Environment* DockerTaskExecutorPrepareInfo::mutable_taskenvironment() {
  set_has_taskenvironment();
  if (taskenvironment_ == NULL) {
    taskenvironment_ = new ::mesos::Environment;
  }
  // @@protoc_insertion_point(field_mutable:mesos.DockerTaskExecutorPrepareInfo.taskEnvironment)
  return taskenvironment_;
}
inline void DockerTaskExecutorPrepareInfo::set_allocated_taskenvironment(::mesos::Environment* taskenvironment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(taskenvironment_);
  }
  if (taskenvironment) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(taskenvironment)->GetArena();
    if (message_arena != submessage_arena) {
      taskenvironment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, taskenvironment, submessage_arena);
    }
    set_has_taskenvironment();
  } else {
    clear_has_taskenvironment();
  }
  taskenvironment_ = taskenvironment;
  // @@protoc_insertion_point(field_set_allocated:mesos.DockerTaskExecutorPrepareInfo.taskEnvironment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mesos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2fmodule_2fhook_2eproto__INCLUDED

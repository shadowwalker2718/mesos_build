// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/uri/uri.proto

#ifndef PROTOBUF_mesos_2furi_2furi_2eproto__INCLUDED
#define PROTOBUF_mesos_2furi_2furi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_mesos_2furi_2furi_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsURIImpl();
void InitDefaultsURI();
inline void InitDefaults() {
  InitDefaultsURI();
}
}  // namespace protobuf_mesos_2furi_2furi_2eproto
namespace mesos {
class URI;
class URIDefaultTypeInternal;
extern URIDefaultTypeInternal _URI_default_instance_;
}  // namespace mesos
namespace mesos {

// ===================================================================

class URI : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mesos.URI) */ {
 public:
  URI();
  virtual ~URI();

  URI(const URI& from);

  inline URI& operator=(const URI& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  URI(URI&& from) noexcept
    : URI() {
    *this = ::std::move(from);
  }

  inline URI& operator=(URI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const URI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const URI* internal_default_instance() {
    return reinterpret_cast<const URI*>(
               &_URI_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(URI* other);
  friend void swap(URI& a, URI& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline URI* New() const PROTOBUF_FINAL { return New(NULL); }

  URI* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const URI& from);
  void MergeFrom(const URI& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(URI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string scheme = 1;
  bool has_scheme() const;
  void clear_scheme();
  static const int kSchemeFieldNumber = 1;
  const ::std::string& scheme() const;
  void set_scheme(const ::std::string& value);
  #if LANG_CXX11
  void set_scheme(::std::string&& value);
  #endif
  void set_scheme(const char* value);
  void set_scheme(const char* value, size_t size);
  ::std::string* mutable_scheme();
  ::std::string* release_scheme();
  void set_allocated_scheme(::std::string* scheme);

  // optional string user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional string password = 3;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string host = 4;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 4;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // required string path = 6;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 6;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string query = 7;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 7;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional string fragment = 8;
  bool has_fragment() const;
  void clear_fragment();
  static const int kFragmentFieldNumber = 8;
  const ::std::string& fragment() const;
  void set_fragment(const ::std::string& value);
  #if LANG_CXX11
  void set_fragment(::std::string&& value);
  #endif
  void set_fragment(const char* value);
  void set_fragment(const char* value, size_t size);
  ::std::string* mutable_fragment();
  ::std::string* release_fragment();
  void set_allocated_fragment(::std::string* fragment);

  // optional int32 port = 5;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mesos.URI)
 private:
  void set_has_scheme();
  void clear_has_scheme();
  void set_has_user();
  void clear_has_user();
  void set_has_password();
  void clear_has_password();
  void set_has_host();
  void clear_has_host();
  void set_has_port();
  void clear_has_port();
  void set_has_path();
  void clear_has_path();
  void set_has_query();
  void clear_has_query();
  void set_has_fragment();
  void clear_has_fragment();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr scheme_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr fragment_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_mesos_2furi_2furi_2eproto::TableStruct;
  friend void ::protobuf_mesos_2furi_2furi_2eproto::InitDefaultsURIImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// URI

// required string scheme = 1;
inline bool URI::has_scheme() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void URI::set_has_scheme() {
  _has_bits_[0] |= 0x00000001u;
}
inline void URI::clear_has_scheme() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void URI::clear_scheme() {
  scheme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scheme();
}
inline const ::std::string& URI::scheme() const {
  // @@protoc_insertion_point(field_get:mesos.URI.scheme)
  return scheme_.GetNoArena();
}
inline void URI::set_scheme(const ::std::string& value) {
  set_has_scheme();
  scheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.URI.scheme)
}
#if LANG_CXX11
inline void URI::set_scheme(::std::string&& value) {
  set_has_scheme();
  scheme_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.URI.scheme)
}
#endif
inline void URI::set_scheme(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scheme();
  scheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.URI.scheme)
}
inline void URI::set_scheme(const char* value, size_t size) {
  set_has_scheme();
  scheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.URI.scheme)
}
inline ::std::string* URI::mutable_scheme() {
  set_has_scheme();
  // @@protoc_insertion_point(field_mutable:mesos.URI.scheme)
  return scheme_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* URI::release_scheme() {
  // @@protoc_insertion_point(field_release:mesos.URI.scheme)
  clear_has_scheme();
  return scheme_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void URI::set_allocated_scheme(::std::string* scheme) {
  if (scheme != NULL) {
    set_has_scheme();
  } else {
    clear_has_scheme();
  }
  scheme_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scheme);
  // @@protoc_insertion_point(field_set_allocated:mesos.URI.scheme)
}

// optional string user = 2;
inline bool URI::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void URI::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void URI::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void URI::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& URI::user() const {
  // @@protoc_insertion_point(field_get:mesos.URI.user)
  return user_.GetNoArena();
}
inline void URI::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.URI.user)
}
#if LANG_CXX11
inline void URI::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.URI.user)
}
#endif
inline void URI::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.URI.user)
}
inline void URI::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.URI.user)
}
inline ::std::string* URI::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:mesos.URI.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* URI::release_user() {
  // @@protoc_insertion_point(field_release:mesos.URI.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void URI::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:mesos.URI.user)
}

// optional string password = 3;
inline bool URI::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void URI::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void URI::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void URI::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& URI::password() const {
  // @@protoc_insertion_point(field_get:mesos.URI.password)
  return password_.GetNoArena();
}
inline void URI::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.URI.password)
}
#if LANG_CXX11
inline void URI::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.URI.password)
}
#endif
inline void URI::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.URI.password)
}
inline void URI::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.URI.password)
}
inline ::std::string* URI::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:mesos.URI.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* URI::release_password() {
  // @@protoc_insertion_point(field_release:mesos.URI.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void URI::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:mesos.URI.password)
}

// optional string host = 4;
inline bool URI::has_host() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void URI::set_has_host() {
  _has_bits_[0] |= 0x00000008u;
}
inline void URI::clear_has_host() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void URI::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
inline const ::std::string& URI::host() const {
  // @@protoc_insertion_point(field_get:mesos.URI.host)
  return host_.GetNoArena();
}
inline void URI::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.URI.host)
}
#if LANG_CXX11
inline void URI::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.URI.host)
}
#endif
inline void URI::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.URI.host)
}
inline void URI::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.URI.host)
}
inline ::std::string* URI::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:mesos.URI.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* URI::release_host() {
  // @@protoc_insertion_point(field_release:mesos.URI.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void URI::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:mesos.URI.host)
}

// optional int32 port = 5;
inline bool URI::has_port() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void URI::set_has_port() {
  _has_bits_[0] |= 0x00000080u;
}
inline void URI::clear_has_port() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void URI::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 URI::port() const {
  // @@protoc_insertion_point(field_get:mesos.URI.port)
  return port_;
}
inline void URI::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:mesos.URI.port)
}

// required string path = 6;
inline bool URI::has_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void URI::set_has_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void URI::clear_has_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void URI::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& URI::path() const {
  // @@protoc_insertion_point(field_get:mesos.URI.path)
  return path_.GetNoArena();
}
inline void URI::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.URI.path)
}
#if LANG_CXX11
inline void URI::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.URI.path)
}
#endif
inline void URI::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.URI.path)
}
inline void URI::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.URI.path)
}
inline ::std::string* URI::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:mesos.URI.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* URI::release_path() {
  // @@protoc_insertion_point(field_release:mesos.URI.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void URI::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:mesos.URI.path)
}

// optional string query = 7;
inline bool URI::has_query() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void URI::set_has_query() {
  _has_bits_[0] |= 0x00000020u;
}
inline void URI::clear_has_query() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void URI::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& URI::query() const {
  // @@protoc_insertion_point(field_get:mesos.URI.query)
  return query_.GetNoArena();
}
inline void URI::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.URI.query)
}
#if LANG_CXX11
inline void URI::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.URI.query)
}
#endif
inline void URI::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.URI.query)
}
inline void URI::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.URI.query)
}
inline ::std::string* URI::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:mesos.URI.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* URI::release_query() {
  // @@protoc_insertion_point(field_release:mesos.URI.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void URI::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:mesos.URI.query)
}

// optional string fragment = 8;
inline bool URI::has_fragment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void URI::set_has_fragment() {
  _has_bits_[0] |= 0x00000040u;
}
inline void URI::clear_has_fragment() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void URI::clear_fragment() {
  fragment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fragment();
}
inline const ::std::string& URI::fragment() const {
  // @@protoc_insertion_point(field_get:mesos.URI.fragment)
  return fragment_.GetNoArena();
}
inline void URI::set_fragment(const ::std::string& value) {
  set_has_fragment();
  fragment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mesos.URI.fragment)
}
#if LANG_CXX11
inline void URI::set_fragment(::std::string&& value) {
  set_has_fragment();
  fragment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mesos.URI.fragment)
}
#endif
inline void URI::set_fragment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fragment();
  fragment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mesos.URI.fragment)
}
inline void URI::set_fragment(const char* value, size_t size) {
  set_has_fragment();
  fragment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mesos.URI.fragment)
}
inline ::std::string* URI::mutable_fragment() {
  set_has_fragment();
  // @@protoc_insertion_point(field_mutable:mesos.URI.fragment)
  return fragment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* URI::release_fragment() {
  // @@protoc_insertion_point(field_release:mesos.URI.fragment)
  clear_has_fragment();
  return fragment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void URI::set_allocated_fragment(::std::string* fragment) {
  if (fragment != NULL) {
    set_has_fragment();
  } else {
    clear_has_fragment();
  }
  fragment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fragment);
  // @@protoc_insertion_point(field_set_allocated:mesos.URI.fragment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mesos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2furi_2furi_2eproto__INCLUDED
